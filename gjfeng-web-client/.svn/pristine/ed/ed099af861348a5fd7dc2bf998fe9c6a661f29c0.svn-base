package cc.messcat.gjfeng.web.wechat;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.http.HttpResponse;
import org.apache.http.util.EntityUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.alipay.direct.config.AlipayConfig;
import com.alipay.direct.util.OrderInfoUtil2_0;
import com.h5pay.api.H5PayUtil;
import com.h5pay.api.HttpUtils;
import com.webpay.utils.MD5;
import com.webpay.utils.SignUtils;
import com.wechat.WeixinUtil;
import com.wechat.popular.bean.User;

import cc.messcat.gjfeng.common.constant.CommonProperties;
import cc.messcat.gjfeng.common.exception.LoggerPrint;
import cc.messcat.gjfeng.common.jd.JdUtil;
import cc.messcat.gjfeng.common.jd.bean.CatDetail;
import cc.messcat.gjfeng.common.jd.bean.GoodDetail;
import cc.messcat.gjfeng.common.jd.bean.JdTrackResult;
import cc.messcat.gjfeng.common.jd.bean.OrderResult;
import cc.messcat.gjfeng.common.jd.bean.ProductStock;
import cc.messcat.gjfeng.common.jd.bean.Province;
import cc.messcat.gjfeng.common.jd.bean.TrackResult;
import cc.messcat.gjfeng.common.util.BeanUtil;
import cc.messcat.gjfeng.common.util.DateHelper;
import cc.messcat.gjfeng.common.util.GenerateQrCodeUtil;
import cc.messcat.gjfeng.common.util.RandUtil;
import cc.messcat.gjfeng.common.vo.app.ResultVo;
import cc.messcat.gjfeng.common.web.BaseController;
import cc.messcat.gjfeng.dubbo.core.GjfMemberInfoDubbo;
import cc.messcat.gjfeng.dubbo.core.GjfProductInfoDubbo;
import cc.messcat.gjfeng.dubbo.core.GjfTradeDubbo;
import cc.messcat.gjfeng.entity.GjfMemberInfo;
import cc.messcat.gjfeng.entity.GjfWeiXinPayInfo;
import net.sf.json.JSONObject;
import prePay.PrePayUtil;

@Controller
@RequestMapping("/wx/test/")
public class TestController extends BaseController {

	@Autowired
	@Qualifier("memberInfoDubbo")
	private GjfMemberInfoDubbo memberInfoDubbo;

	@Autowired
	@Qualifier("request")
	private HttpServletRequest request;

	@Autowired
	@Qualifier("tradeDubbo")
	private GjfTradeDubbo tradeDubbo;

	@Autowired
	@Qualifier("productInfoDubbo")
	private GjfProductInfoDubbo productInfoDubbo;

	@Autowired
	@Qualifier("response")
	private HttpServletResponse response;

	@Value("${dubbo.application.web.client}")
	private String projectNames;

	@Value("${upload.member.code.path}")
	private String imageFolderNames;

	/**
	 * 测试跳转到友集网
	 * 
	 * @param account
	 * @return
	 */
	@RequestMapping(value = "/testNetFriends", method = RequestMethod.GET)
	@ResponseBody
	public Object testNetFriends(String account) {
		try {
			GjfMemberInfo member = memberInfoDubbo.findMember(account);
			request.getSession().setAttribute("member", member);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 测试分红
	 * 
	 * @param account
	 * @return
	 */
	@RequestMapping(value = "/testbenefit", method = RequestMethod.GET)
	@ResponseBody
	public Object testbenefit(String account, String tradeNo, String payNo) {
		try {
			tradeDubbo.updateStoreBenefitPayStatus(tradeNo, payNo, "1");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	// 测试从友集网获取商品数据
	@RequestMapping(value = "/testGetNetFriendsProductData", method = RequestMethod.GET)
	@ResponseBody
	public Object testGetNetFriendsProductData(String gid) throws IOException {
		Map<String, String> map = new HashMap<String, String>();
		map.put("appKey", "FnHbJsK6yFFuihUSef");
		map.put("page", "1");
		map.put("amount", "10");
		map.put("gid", gid);

		Map<String, String> params = SignUtils.paraFilter(map);
		StringBuilder buf = new StringBuilder((params.size() + 1) * 10);
		SignUtils.buildPayParams(buf, params, false);
		String preStr = buf.toString();
		// 生成签名
		// String
		// sign=DigestUtils.md5Hex(MD5.getContentBytes(preStr+"xk87UZUY1sdSD1SDSA3sOmKNSk2Kxa9s",
		// "utf-8"));
		String sign = MD5.sign("keyValue=".toUpperCase() + "xk87UZUY1sdSD1SDSA3sOmKNSk2Kxa9s".toUpperCase() + "&",
				preStr.toUpperCase(), "utf-8");
		// 请求域名
		String host = "http://m.upinkji.com";
		// 请求后缀
		String path = "/wap/Phoenix/product_list";
		// 请求类型
		String method = "GET";
		// 设置请求头
		Map<String, String> headers = new HashMap<String, String>();
		headers.put("Content-Type", "text/xml;charset=utf-8");
		// 请求参数
		Map<String, String> querys = new HashMap<String, String>();
		querys.put("appKey", "FnHbJsK6yFFuihUSef");
		querys.put("page", "1");
		querys.put("amount", "10");
		querys.put("gid", gid);

		querys.put("sign", sign);
		try {
			HttpResponse response = HttpUtils.doGet(host, path, method, headers, querys);

			System.out.println(response.toString());
			// 获取response的body
			String str = EntityUtils.toString(response.getEntity());
			JSONObject json = JSONObject.fromObject(str);
			// resultVo=productInfoDubbo.addNetFriendProductInfo(json);
			return json;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 测试微信app支付
	 * 
	 * @param account
	 * @return
	 */
	@RequestMapping(value = "/testWeiAppPays", method = RequestMethod.GET)
	@ResponseBody
	public Object testWeiAppPays(String account, String money) {
		try {
			String tradeNo = DateHelper.dataToString(new Date(), "yyyyMMddHHmmss" + RandUtil.getRandomStr(6));
			Map map = WeixinUtil.unifiedorderResultInApp(request, tradeNo, "充值授信额度", money.toString(),
					CommonProperties.GJFENG_WEIXIN_JSPAY_NOTIFY_URL_SHOUXIN);
			return map;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 测试支付宝支付
	 * 
	 * @param account
	 * @return
	 */
	@RequestMapping(value = "/testAplyAppPay", method = RequestMethod.GET)
	@ResponseBody
	public Object testAplyAppPay(String money) {
		try {
			String tradeNo = DateHelper.dataToString(new Date(), "yyyyMMddHHmmss" + RandUtil.getRandomStr(6));
			Map<String, String> params = OrderInfoUtil2_0.getAppPlayParams(tradeNo, "下单成功", money, "购买商品",
					AlipayConfig.banefit_notify);
			String orderParam = OrderInfoUtil2_0.buildOrderParam(params, false);
			String sign = OrderInfoUtil2_0.getSign(params, AlipayConfig.RSA_PRIVATE);
			final String orderInfo = orderParam + "&" + sign + "&sign_type=\"RSA\"";
			return orderInfo;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 微信扫码支付测试
	 * 
	 * @param account
	 * @return
	 */
	@RequestMapping(value = "WeiSweepPay", method = RequestMethod.GET)
	@ResponseBody
	public Object WeiSweepPay(String account) {
		String obj = "";
		Map<String, String> map = new HashMap<>();
		try {
			H5PayUtil.payChannel();
			String tradeNo = DateHelper.dataToString(new Date(), "yyyyMMddHHmmss" + RandUtil.getRandomStr(6));
			GjfWeiXinPayInfo payInfo = (GjfWeiXinPayInfo) tradeDubbo.findWeiXinBaseInfo("0").getResult();
			GjfMemberInfo gjfMemberInfo = memberInfoDubbo.findMember(account);
			obj = H5PayUtil.WeiSweepPay(payInfo, request, response, gjfMemberInfo, "0.01", tradeNo, "充值额度", "充值描述",
					CommonProperties.GJFENG_H5_NOTIFY_SHOUXIN);

			String[] str = obj.split("&");

			for (int j = 0; j < str.length; j++) {
				String str0 = str[j];
				String[] str1 = str0.split("=");
				if (str1.length == 1) {
					map.put(str1[0], "");
				} else {
					for (int k = 0; k < str1.length; k++) {
						map.put(str1[0], str1[1]);
					}
				}
			}
			String url = GenerateQrCodeUtil.generateQrcode(request, map.get("prepayId"), projectNames,
					imageFolderNames);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return obj;
	}

	/**
	 * 微信支付测试
	 * 
	 * @param account
	 * @return
	 */
	@RequestMapping(value = "getUnid", method = RequestMethod.GET)
	@ResponseBody
	public Object getUnid(String account) {
		try {
			// 获取微信配置信息
			GjfMemberInfo gjfMemberInfo = memberInfoDubbo.findMember(account);
			String tradeNo = DateHelper.dataToString(new Date(), "yyyyMMddHHmmss" + RandUtil.getRandomStr(6));
			GjfWeiXinPayInfo payInfo = (GjfWeiXinPayInfo) tradeDubbo.findWeiXinBaseInfo("0").getResult();
			String token_id = H5PayUtil.weiXinPay(payInfo, request, tradeNo, "0.01".toString(), "充值授信额度",
					CommonProperties.GJFENG_WEIXIN_NOTIFY_SHOUXIN, CommonProperties.GJFENG_WEIXIN_CALLBACK_URL_SHOUXIN,
					gjfMemberInfo.getOpenId());
			System.out.println("-----返回成功" + token_id);
			resultVo.setResult(token_id);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return resultVo;
	}

	/**
	 * 测试分红权
	 * 
	 * @param account
	 * @return
	 */
	@RequestMapping(value = "testDividends", method = RequestMethod.GET)
	@ResponseBody
	public Object testDividends() {
		User users = null;
		try {
			String out_trade_no = DateHelper.dataToString(new Date(), "yyyyMMddHHmmss" + RandUtil.getRandomStr(6))
					.toString();
			GjfWeiXinPayInfo payInfo = (GjfWeiXinPayInfo) tradeDubbo.findWeiXinBaseInfo("0").getResult();
			PrePayUtil.posPrePayRe(payInfo, request, out_trade_no, "0.01", "购买商品", "oAE3-wZnsd95lwSkHulGmiuTsDNs",
					CommonProperties.GJFENG_H5_NOTIFY_SHOUXIN);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return users;
	}

	/**
	 * 测试微信app支付
	 * 
	 * @param account
	 * @return
	 */
	@RequestMapping(value = "testWeiAppPay", method = RequestMethod.GET)
	@ResponseBody
	public Object testWeiAppPay(String account) {
		try {
			GjfWeiXinPayInfo payInfo = (GjfWeiXinPayInfo) tradeDubbo.findWeiXinBaseInfo("0").getResult();
			GjfMemberInfo gjfMemberInfo = memberInfoDubbo.findMember(account);
			String tradeNo = DateHelper.dataToString(new Date(), "yyyyMMddHHmmss" + RandUtil.getRandomStr(6));
			Map<String, String> map = H5PayUtil.weixinAppPay(payInfo, request, gjfMemberInfo, "0.01".toString(),
					tradeNo, CommonProperties.GJFENG_WEIXIN_NOTIFY_SHOUXIN);
			System.out.println("-----返回成功" + map);
			resultVo.setResult(map);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	/**
	 * 测试支付宝app支付
	 * 
	 * @param account
	 * @return
	 */
	@RequestMapping(value = "testaplAppPay", method = RequestMethod.GET)
	public ModelAndView testaplAppPay(@RequestParam("account") String account) {
		Map<String, Object> model = new HashMap<>();
		try {
			GjfWeiXinPayInfo payInfo = (GjfWeiXinPayInfo) tradeDubbo.findWeiXinBaseInfo("0").getResult();
			GjfMemberInfo gjfMemberInfo = memberInfoDubbo.findMember(account);
			String tradeNo = DateHelper.dataToString(new Date(), "yyyyMMddHHmmss" + RandUtil.getRandomStr(6));
			Map<String, String> map = H5PayUtil.alipayAppPay(gjfMemberInfo, request, "0.01".toString(), tradeNo, "测试购买",
					"购买测试", CommonProperties.GJFENG_WEIXIN_NOTIFY_SHOUXIN);
			resultVo = new ResultVo(200, "返回成功", map);
			model.put("resultVo", resultVo);
		} catch (Exception e) {
			resultVo = LoggerPrint.getResult(e, MemberController.class);
			model.put("resultVo", resultVo);
		}
		return new ModelAndView("wx/online-shop/alipayCashier", model);
	}

	// 测试从card walkers
	@RequestMapping(value = "/testCardWalKersProductInfo", method = RequestMethod.GET)
	@ResponseBody
	public Object testCardWalKersProductInfo() throws IOException {
		String requestPath = "/api/goods/category";

		String url = "http://61.128.158.218:9001/mall-api" + requestPath;
		JdUtil.getData(url, requestPath, null);
		return null;
	}

	// 测试从card walkers
	@RequestMapping(value = "/testJDProductInfo", method = RequestMethod.GET)
	@ResponseBody
	public Object testJDProductInfo(String type) throws IOException {
		resultVo = productInfoDubbo.addJdProductInfoToPar(type);
		return resultVo;
	}

	// 测试从card walkers
	@RequestMapping(value = "/testGetProInfo", method = RequestMethod.GET)
	@ResponseBody
	public Object testGetProInfo() throws IOException {
		Map<String, Object> data = new HashMap<>();
		String requestPath = "/api/goods/goodsPool.html";
		String url = "http://61.128.158.218:9001/mall-api" + requestPath;
		data.put("catId", "12259");
		JdUtil.getData(url, requestPath, data);
		return null;
	}

	// 测试从card walkers
	@RequestMapping(value = "/getProInfo", method = RequestMethod.GET)
	@ResponseBody
	public Object getProInfo() throws IOException {
		List<Province> list = JdUtil.getJdProvince();
		return new ResultVo(200, "获取成功", list);
	}

	// 测试从card walkers
	@RequestMapping(value = "/getProStock", method = RequestMethod.GET)
	@ResponseBody
	public Object getProStock(String goodsId, String area) throws IOException {
		List<ProductStock> list = JdUtil.getProductStore(goodsId, area);
		return new ResultVo(200, "获取成功", list);
	}

	// 测试从card walkers
	@RequestMapping(value = "/getProOrder", method = RequestMethod.GET)
	@ResponseBody
	public Object getProOrder() throws IOException {
		String requestPath = "/api/order/createOrder";
		String url = "http://61.128.158.218:9001/mall-api" + requestPath;

		// 传递业务参数
		Map<String, Object> data = new HashMap<String, Object>();

		/** 交易流水号（流水号相同，表示同一笔订单交易） */
		data.put("tradeNo", "131311114444");
		/** 收货人姓名 */
		data.put("name", "吖吖");
		/** 省 */
		data.put("provinceId", 27062);
		/** 市 */
		data.put("cityId", 27063);
		/** 区 */
		data.put("districtId", 27064);
		/** 镇 */
		data.put("townId", 43542);
		/** 收货人详细地址 */
		data.put("address", "1313");
		/** 座机号 */
		data.put("phone", "");
		/** 手机号 */
		data.put("mobile", "18888888888");
		/** 邮箱 */
		data.put("email", "31312@qq.com");
		/** 交易时间 格式（yyyyMMdd HHmmss） */
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd HHmmss");
		data.put("tranTime", sdf.format(new Date()));
		List<Map<String, Object>> goodsNum = new ArrayList<>();
		Map<String, Object> goodsMap = new HashMap<String, Object>();
		goodsMap.put("goodsId", 397974);
		goodsMap.put("goodsNum", 1);
		goodsNum.add(goodsMap);
		/** 商品信息 */
		data.put("sku", goodsNum);
		JdUtil.getData(url, requestPath, data);
		return null;
	}

	// 测试从card walkers
	@RequestMapping(value = "/testConfim", method = RequestMethod.GET)
	@ResponseBody
	public Object testConfim(String orderSn, String jdOrderSn) throws IOException {
		OrderResult result = JdUtil.cofirmOrder(orderSn, jdOrderSn);
		return new ResultVo(200, "获取成功", result);
	}

	// 测试从card walkers
	@RequestMapping(value = "/testTrack", method = RequestMethod.GET)
	@ResponseBody
	public Object testTrack(String orderSn) throws IOException {
		TrackResult jdTrack = JdUtil.getTrack(orderSn);
		return new ResultVo(200, "获取成功", jdTrack);
	}

	// 测试从card walkers
	@RequestMapping(value = "/testGetProductDetail", method = RequestMethod.GET)
	@ResponseBody
	public Object testGetProductDetail(String goodsId) throws IOException {
		GoodDetail goodDetail = JdUtil.getJdGoodDetail(goodsId);
		return new ResultVo(200, "获取成功", goodDetail);
	}

	// 测试从card walkers
	@RequestMapping(value = "/testCatId", method = RequestMethod.GET)
	@ResponseBody
	public Object testCatId(String type) throws IOException {
		CatDetail goodDetail = JdUtil.addTestJdProductInfo();
		if (BeanUtil.isValid(goodDetail) && "1".equals(type)) {
			return new ResultVo(200, "获取成功", goodDetail.getFirstLevel());
		}
		if (BeanUtil.isValid(goodDetail) && "2".equals(type)) {
			return new ResultVo(200, "获取成功", goodDetail.getSecondLevel());
		}
		if (BeanUtil.isValid(goodDetail) && "3".equals(type)) {
			return new ResultVo(200, "获取成功", goodDetail.getThridLevel());
		}
		return new ResultVo(200, "获取成功", null);
	}

	// 分頁添加京東商品數據
	@RequestMapping(value = "/addJdPro", method = RequestMethod.GET)
	@ResponseBody
	public Object addJdPro(Integer pageNo, Integer pageSize) throws IOException {
		resultVo = productInfoDubbo.addJdProductByPager(pageNo, pageSize);
		return resultVo;
	}

}
