package cc.messcat.gjfeng.web.app.v1;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import cc.messcat.gjfeng.common.exception.LoggerPrint;
import cc.messcat.gjfeng.common.util.ObjValid;
import cc.messcat.gjfeng.common.web.BaseController;
import cc.messcat.gjfeng.dubbo.core.GjfOrderInfoDubbo;
import cc.messcat.gjfeng.dubbo.core.GjfProductCommentDubbo;
import cc.messcat.gjfeng.dubbo.core.GjfProductInfoDubbo;
import cc.messcat.gjfeng.entity.GjfMemberInfo;
import cc.messcat.gjfeng.entity.GjfProductComment;
import cc.messcat.gjfeng.entity.GjfProductInfo;
import cc.messcat.gjfeng.upload.UploadFileUtil;
import cc.messcat.gjfeng.web.wechat.ProductController;

@Controller
@RequestMapping(value="app/comment/",headers="app-version=v1.0")
public class ProductCommentControllerV1 extends BaseController {

	@Autowired
	private GjfProductCommentDubbo productCommetDubbo;

	@Autowired
	@Qualifier("orderInfoDubbo")
	private GjfOrderInfoDubbo orderInfoDubbo;
	
	@Autowired
	@Qualifier("productInfoDubbo")
	private GjfProductInfoDubbo productInfoDubbo;
	
	@Autowired
	@Qualifier("request")
	private HttpServletRequest request;
	
	@Value("${gjfeng.client.project.url}")
	private String projectName;

	@Value("${upload.assessment.path}")
	private String imageFolderName;
	
	/**
	 * 添加評論
	 * 
	 * @param comment
	 * @param fileContent
	 * @param fileName
	 * @return
	 */
	@RequestMapping(value = "v1_0/newProCommet", method = RequestMethod.POST)
	@ResponseBody
	public Object newProCommet(Long memberId,String proId,String comScore,String content, String fileContent, String fileName, String orderSn) {	
		try {

			//处理评论信息
			String[] pros=proId.split(",");
			String[] scores=comScore.split(",");
			String[] contents=content.split("&");
			String[] fileContents=null;
			if(!ObjValid.isNotValid(fileContent)){
				fileContents=fileContent.substring(0, fileContent.length()-1).split(",");
			}
			
			GjfMemberInfo info=new GjfMemberInfo();
			info.setId(memberId);
			for(int i=0;i<pros.length;i++){
				GjfProductComment comment=new GjfProductComment();
				GjfProductInfo productInfo=new GjfProductInfo();
				productInfo.setId(Long.parseLong(pros[i]));
		    	comment.setMember(info);
		    	comment.setContent(contents[i]);
		    	comment.setComScore(Integer.parseInt(scores[i]));
		    	comment.setProduct(productInfo);
		    	String url="";;
		    	if(!ObjValid.isNotValid(fileContents)){
		    		if(fileContents.length>i){		    				    			
		    			String fils = UploadFileUtil.uploadBase63(fileName, fileContents[i], request, imageFolderName);
		    			url = projectName + imageFolderName + "/" + fils;	
		    		}		    		
				}
		    	resultVo = productCommetDubbo.addProComment(comment,url, fileName, orderSn);
			}		   			
		} catch (Exception e) {
			LoggerPrint.getResult(e, ProductController.class);
		}	
		return resultVo;	
	}
	
	
	/**
	 * 分页获取评论信息
	 * @param pageNo
	 * @param pageSize
	 * @param proId
	 * @return
	 */
	@RequestMapping(value = "v1_0/getAllProCommetByPage", method = RequestMethod.GET)
	@ResponseBody
	public Object getAllProCommetByPage(Integer pageNo, Integer pageSize, Long proId,String state) {
		try {
			Map<String, Object> map=new HashMap<>();			
			resultVo = productCommetDubbo.getProComByPager(pageNo, pageSize, proId,state);
			map.put("comm", resultVo.getResult());
			map.put("count", productCommetDubbo.countProCom(proId,state));
			resultVo.setResult(map);
		} catch (Exception e) {
			LoggerPrint.getResult(e, ProductController.class);
		}
		return resultVo;
	}
	
	
	/**
	 * 刪除評論
	 * 
	 * @param comId
	 * @return
	 */
	@RequestMapping(value = "delProCommet", method = RequestMethod.POST)
	@ResponseBody
	public Object delProCommet(Long comId) {
		try {
			resultVo = productCommetDubbo.removeCom(comId);			
		} catch (Exception e) {
			LoggerPrint.getResult(e, ProductController.class);
		}
		return resultVo;
	}
	
	
	/**
	 * 统计商品评论数
	 * @param proId
	 * @return
	 */
	@RequestMapping(value = "getProductById", method = RequestMethod.GET)
	@ResponseBody
	public Object getProductById(Long proId) {
		try {
			resultVo = productInfoDubbo.findProductById(proId);

		} catch (Exception e) {
			LoggerPrint.getResult(e, ProductController.class);
		}
		return resultVo;
	}

}
