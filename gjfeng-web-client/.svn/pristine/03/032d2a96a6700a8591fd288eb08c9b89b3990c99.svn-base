package cc.messcat.gjfeng.web.app.v1;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.alipay.direct.config.AlipayConfig;
import com.alipay.direct.util.OrderInfoUtil2_0;
import com.h5pay.api.H5PayUtil;
import com.wechat.WeixinUtil;

import cc.messcat.gjfeng.common.constant.CommonProperties;
import cc.messcat.gjfeng.common.exception.LoggerPrint;
import cc.messcat.gjfeng.common.fastpay.payForOther.FastPayDemoTest;
import cc.messcat.gjfeng.common.util.BeanUtil;
import cc.messcat.gjfeng.common.util.DateHelper;
import cc.messcat.gjfeng.common.util.EncryptionUtil;
import cc.messcat.gjfeng.common.util.ObjValid;
import cc.messcat.gjfeng.common.util.RandUtil;
import cc.messcat.gjfeng.common.util.StringUtil;
import cc.messcat.gjfeng.common.vo.app.MemberTradeBenefitVo;
import cc.messcat.gjfeng.common.vo.app.OrderAddModel;
import cc.messcat.gjfeng.common.vo.app.OrderAddVo;
import cc.messcat.gjfeng.common.vo.app.OrderInfoVo;
import cc.messcat.gjfeng.common.vo.app.ResultVo;
import cc.messcat.gjfeng.common.web.BaseController;
import cc.messcat.gjfeng.dubbo.core.GjfAddressDubbo;
import cc.messcat.gjfeng.dubbo.core.GjfCartInfoDubbo;
import cc.messcat.gjfeng.dubbo.core.GjfMemberInfoDubbo;
import cc.messcat.gjfeng.dubbo.core.GjfOrderInfoDubbo;
import cc.messcat.gjfeng.dubbo.core.GjfTradeDubbo;
import cc.messcat.gjfeng.entity.GjfMemberInfo;
import cc.messcat.gjfeng.entity.GjfOrderInfo;
import cc.messcat.gjfeng.entity.GjfWeiXinPayInfo;
import cc.messcat.gjfeng.util.SessionUtil;
import cc.messcat.gjfeng.web.wechat.OrderController;
import cc.messcat.gjfeng.web.wechat.StoreController;

@Controller
@RequestMapping(value = "app/order/", headers = "app-version=v1.0")
public class OrderControllerV1 extends BaseController {

	@Autowired
	@Qualifier("request")
	private HttpServletRequest request;

	@Autowired
	@Qualifier("response")
	private HttpServletResponse response;

	@Autowired
	@Qualifier("orderInfoDubbo")
	private GjfOrderInfoDubbo orderInfoDubbo;

	@Autowired
	@Qualifier("addressDubbo")
	private GjfAddressDubbo addressDubbo;

	@Autowired
	@Qualifier("memberInfoDubbo")
	private GjfMemberInfoDubbo memberInfoDubbo;

	@Autowired
	@Qualifier("cartInfoDubbo")
	private GjfCartInfoDubbo cartInfoDubbo;

	@Autowired
	@Qualifier("tradeDubbo")
	private GjfTradeDubbo tradeDubbo;
	
	@Value("${gjfeng.client.project.url}")
	private String projectName;

	/**
	 * @描述 根据状态获取订单信息
	 *
	 */
	@RequestMapping(value = "v1_0/getOrder", method = RequestMethod.POST)
	@ResponseBody
	public Object getOrder(String account, Integer pageNo, Integer pageSize, String status) {
		try {
			resultVo = orderInfoDubbo.findMyOrder(ObjValid.isNotValid(pageNo) ? 1 : pageNo,
					ObjValid.isNotValid(pageSize) ? 10 : pageSize, account, status);
		} catch (Exception e) {
			resultVo = LoggerPrint.getResult(e, OrderController.class);
		}
		return resultVo;
	}

	/**
	 * @描述 确认收货
	 * @author Karhs
	 * @date 2017年1月9日
	 * @param orderSn
	 * @param status
	 * @return
	 */
	@RequestMapping(value = "v1_0/updateOrderStatus", method = RequestMethod.POST)
	@ResponseBody
	public Object updateOrderStatus(@RequestParam("account") String account, @RequestParam("orderSn") String orderSn,
			@RequestParam("status") String status) {
		try {
			resultVo = orderInfoDubbo.updateOrderStatus(orderSn, "", status, account, null, "1");
		} catch (Exception e) {
			resultVo = LoggerPrint.getResult(e, OrderController.class);
		}
		return resultVo;
	}

	/**
	 * @描述 下单Search

	 * @author Karhs
	 * @date 2017年1月9日
	 * @param orderStatus
	 * @return
	 */

	@SuppressWarnings("rawtypes")
	@RequestMapping(value = "v1_0/addOrder", method = RequestMethod.POST)
	@ResponseBody
	public Object addOrder(String goodsId,String goodsAttrStockId,String goodsAttrIds,String goodsAttr,String goodsNum, @RequestParam("payType") String payType, String remark,
			Long couponsId, @RequestParam("orderAddressId") Long orderAddressId, String payPassword,String account) {
		try {		
			if (payType.equals("0")  || payType.equals("8")) {
				// 如果是全余额支付，则主要校检其支付密码
				GjfMemberInfo info = memberInfoDubbo.findMember(account);
				if (StringUtil.isBlank(info.getPayPassword())) {
					resultVo = new ResultVo(402, "请先设置支付密码", null);
					return resultVo;
				}
				if (!info.getPayPassword().equals(EncryptionUtil.getMD5Code(info.getMobile() + payPassword))) {
					resultVo = new ResultVo(401, "支付密码错误", null);
					return resultVo;
				}
			}
			if(StringUtil.isBlank(goodsId)||StringUtil.isBlank(goodsAttrStockId)||StringUtil.isBlank(goodsAttrIds)||StringUtil.isBlank(goodsAttr)||StringUtil.isBlank(goodsNum)){
				resultVo = new ResultVo(401, "参数错误", null);
				return resultVo;
			}
			String[] goodsIds=goodsId.split(",");
			String[] goodsAttrStockIds=goodsAttrStockId.split(",");
			String[] goodsAttrId=goodsAttrIds.split(";");
			String[] goodsAttrs=goodsAttr.split(",");
			String[]  goodsNums=goodsNum.split(",");
			List<OrderAddVo> orderAddVosList =new ArrayList<>();
			for(int i=0;i<goodsIds.length;i++){
				OrderAddVo orderAddVos=new OrderAddVo();
				orderAddVos.setGoodsId(Long.parseLong(goodsIds[i]));
				orderAddVos.setGoodsAttrStockId(Long.parseLong(goodsAttrStockIds[i]));
				orderAddVos.setGoodsAttrIds(goodsAttrId[i]);
				orderAddVos.setGoodsAttr(goodsAttrs[i]);
				orderAddVos.setGoodsNum(Long.parseLong(goodsNums[i]));
				orderAddVosList.add(orderAddVos);
			}			
			resultVo = orderInfoDubbo.addOrder(account, orderAddVosList, "1", payType, remark, couponsId, orderAddressId);

			if (resultVo.getCode() == 200) {
				GjfOrderInfo gjfOrderInfo = (GjfOrderInfo) resultVo.getResult();
				if (payType.equals("1")) {
					// 调用微信支付
					GjfWeiXinPayInfo payInfo = (GjfWeiXinPayInfo) tradeDubbo.findWeiXinBaseInfo("0").getResult();
					/*String token_id = H5PayUtil.weiXinPay(payInfo, request, gjfOrderInfo.getOrderSn(),
							gjfOrderInfo.getOfflinePayAmount().toString(), "购买商品",
							CommonProperties.GJFENG_WEIXIN_NOTIFY_ORDER,
							CommonProperties.GJFENG_WEIXIN_CALLBACK_URL_ORDER, gjfOrderInfo.getMemberId().getOpenId());*/
					Map map=WeixinUtil.unifiedorderResultInApp(request,gjfOrderInfo.getOrderSn(),"充值授信额度",gjfOrderInfo.getOfflinePayAmount().toString(),CommonProperties.GJFENG_WEIXIN_JSPAY_NOTIFY_URL_ORDER);
					resultVo.setResult(map);
				} else if (payType.equals("2")||("7".equals(payType)&&gjfOrderInfo.getOfflinePayAmount().doubleValue()!=0)||("8".equals(payType)&&gjfOrderInfo.getOfflinePayAmount().doubleValue()!=0)) {
					// 调用支付宝支付
					Map<String, String> map=new HashMap<>();
					Map<String, String> params = OrderInfoUtil2_0.getAppPlayParams(gjfOrderInfo.getOrderSn(), "下单成功",
							gjfOrderInfo.getOfflinePayAmount().toString(), "购买商品", AlipayConfig.order_notify);
					String orderParam = OrderInfoUtil2_0.buildOrderParam(params, false);
					String sign = OrderInfoUtil2_0.getSign(params, AlipayConfig.RSA_PRIVATE);
					final String orderInfo = orderParam + "&" + sign + "&sign_type=\"RSA\"";
					map.put("payString", orderInfo);
					resultVo.setResult(map);
					
				} else if (payType.equals("3")) {
					// 调用银联支付
					/*resultVo = new ResultVo(200, "查询成功",
							projectName + "/appNeed/appWangYinPay?type=0&payMoney="
									+ String.valueOf(gjfOrderInfo.getOfflinePayAmount().doubleValue()) + "&memberInfo="
									+ benefitVo.getMemberId() + "&orderSn=" + gjfOrderInfo.getOrderSn());
					return resultVo;*/
					Map<String, Object> model=new HashMap<>();
					//网银支付方式2
					model.put("orderId", gjfOrderInfo.getOrderSn());
					model.put("payMoney", gjfOrderInfo.getOfflinePayAmount().doubleValue());
					model.put("isReadName", gjfOrderInfo.getMemberId().getIsReadName());
					model.put("idCard", gjfOrderInfo.getMemberId().getIdCard());
					model.put("mobile", gjfOrderInfo.getMemberId().getMobile());
					model.put("retUrl", CommonProperties.GJFENG_WANGYIN_PAY_NOTIFY_URL_ORDER);
					// 查询用户最新的资金情况和所有的银行卡列表
					model.put("bankCardInfo",  tradeDubbo.toDrawCash(account).getResult());
					resultVo.setResult(model);
					
				}
			}

		} catch (Exception e) {
			resultVo = LoggerPrint.getResult(e, OrderController.class);
		}
		return resultVo;
	}

	
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "v1_0/toAdd", method = RequestMethod.POST)
	@ResponseBody
	public Object toAddOrder(OrderAddModel orderAddModel, Long orderAddressId,String goodSource,String account) {
		Map<String, Object> model = new HashMap<String, Object>();
		try {			
			// 查询当前用户的最新信息
			List<OrderAddVo> orderAddVos = orderAddModel.getOrderAddVos();
			model.put("gjfMemberInfo", memberInfoDubbo.findMember(account));
			if (ObjValid.isValid(orderAddressId)) {
				model.put("memberDefAddress", addressDubbo.findAddressById(orderAddressId, account,goodSource));
			} else {
				// 查询用户默认的收货地址
				model.put("memberDefAddress", addressDubbo.findMyDefDeliveryAddress(account,goodSource));
			}
			// 查询订单信息
			resultVo = orderInfoDubbo.toAddOrder(orderAddVos);
			Object o = resultVo.getResult();
			if (ObjValid.isValid(o)) {
				Map<String, Object> data = (Map<String, Object>) o;
				model.put("totalAmount", data.get("totalAmount"));
				model.put("goodsVos", data.get("goodsVos"));
				model.put("isCanUseCou", data.get("isCanUseCou"));
				model.put("pos", data.get("pos"));
				model.put("pointNiceAmount", data.get("pointNiceAmount"));
				model.put("goodSource", goodSource);
			}
			model.put("orderAddVos", orderAddVos);
			resultVo.setResult(model);

			// 查询物流费用
		} catch (Exception e) {
			resultVo = LoggerPrint.getResult(e, OrderController.class);
			model.put("memberDefAddress", null);
			model.put("orderGoods", null);
			resultVo.setResult(model);
		}
		return resultVo;
	}
	
	
	/**
	 * @描述 结算购物车
	 * @author Karhs
	 * @date 2017年1月9日
	 * @param orderStatus
	 * @return
	 */
	@RequestMapping(value = "v1_0/actCart", method = RequestMethod.POST)
	@ResponseBody
	public Object actCart(@RequestParam("cartIds") String cartIds,String account) {
		return new ResultVo(200,"查询成功",projectName+"/appNeed/appActCart?cartIds="+cartIds+"&account="+account);

	}
	
	/**
	 * @描述 H5结算购物车
	 * @author Karhs
	 * @date 2017年1月9日
	 * @param orderStatus
	 * @return
	 */
	@RequestMapping(value = "v1_0/actCartInH5", method = RequestMethod.POST)
	@ResponseBody
	public Object actCartInH5(@RequestParam("cartIds") String cartIds,String account){
		Map<String, Object> model=new HashMap<>();
		try {
			
			// 查询当前用户的最新信息
			model.put("gjfMemberInfo", memberInfoDubbo.findMember(account));
			// 查询用户默认的收货地址
			model.put("memberDefAddress", addressDubbo.findMyDefDeliveryAddress(account,"0"));
			// 查询订单信息
			resultVo = cartInfoDubbo.caculateCart(account, cartIds);
			Object o = resultVo.getResult();
			if (ObjValid.isValid(o)) {
				Map<String, Object> data = (Map<String, Object>) o;
				model.put("totalAmount", data.get("totalAmount"));
				model.put("goodsVos", data.get("goodsVos"));
				model.put("orderAddVos", data.get("orderAddVos"));
				model.put("isCanUseCou", data.get("isCanUseCou"));
				model.put("pos", data.get("pos"));
				model.put("goodSource", data.get("goodSource"));
				model.put("pointNiceAmount", data.get("pointNiceAmount"));
			}

			// 移除购物车
			String[] carIds = cartIds.split(",");
			for (String str : carIds) {
				cartInfoDubbo.delCart(Long.valueOf(str), account);
			}
			resultVo.setResult(model);			
			// 查询物流费用
		} catch (Exception e) {
			resultVo = LoggerPrint.getResult(e, OrderController.class);
			
		}
		return resultVo;
	}
	
	/**
	 * 获取用户某个收货地址
	 */
	@RequestMapping(value = "v1_0/getMemAddreById", method = RequestMethod.POST)
	@ResponseBody
	public Object getMemAddreById(Long orderAddressId,String account) {
		try {
			resultVo = addressDubbo.findAddressById(orderAddressId, account,"0");
		} catch (Exception e) {
			resultVo = LoggerPrint.getResult(e, OrderController.class);
		}
		return resultVo;
	}
	
	
	/**
	 * 获取店铺订单信息
	 */
	@RequestMapping(value="v1_0/findO2oOrderByPage",method=RequestMethod.POST)
	@ResponseBody
	public Object findO2oOrderByPage(String status,Long storeId,String beginTime,String endTime,Integer pageNo,Integer pageSize){
		Map<String, Object> map=new HashMap<>();
		try {
			if(!BeanUtil.isValid(pageNo)){
				pageNo=1;
			}
			if(!BeanUtil.isValid(pageSize)){
				pageSize=10;
			}
			resultVo = orderInfoDubbo.findO2oOrderInfo(status,storeId,beginTime,endTime,pageNo,pageSize);
			map.put("storeId", storeId);
			map.put("status", status);
			map.put("resultVo", resultVo.getResult());
		   resultVo.setResult(map);
		} catch (Exception e) {
			resultVo = LoggerPrint.getResult(e, StoreController.class);			
		}
		return resultVo;
	}
	
	
	/**
	 * 生成付款二维码
	 * @return
	 */
	@RequestMapping(value="v1_0/goMoneyPage",method = RequestMethod.POST)
	@ResponseBody
	public Object goMoneyPage(Long storeId){
		Map<String, Object> model = new HashMap<String, Object>();		
		try {
			String url = URLEncoder.encode(CommonProperties.CLIENT_PROJECT_URL+"/wx/store/goInputMoneyPage?storeId="+storeId, "UTF-8");
			model.put("storeId", storeId);
			model.put("url", url);
		    resultVo=new ResultVo();
			resultVo.setResult(model);
		} catch (UnsupportedEncodingException e) {			
			e.printStackTrace();
		}
		return resultVo;
	}
	
	/**
	 * @描述 未支付订单调用支付
	 * @author Karhs
	 * @date 2017年1月23日
	 * @param orderSn
	 * @return
	 */
	@RequestMapping(value = "v1_0/payOrderSign", method = RequestMethod.POST)
	@ResponseBody
	public Object payOrderSign(@RequestParam("orderSn") String orderSn,String orderType,String account) {
		try {			
			resultVo = orderInfoDubbo.findOrderDetail(orderSn, account);
			if (resultVo.getCode() == 200) {
				OrderInfoVo infoVo = (OrderInfoVo) resultVo.getResult();
				if (infoVo.getOrderStatus().equals("1")) {
					resultVo.setCode(400);
					resultVo.setResult("订单已经付款，无需重复");
					return resultVo;
				} else if (!infoVo.getOrderStatus().equals("0")) {
					resultVo.setCode(400);
					resultVo.setResult("订单不是待付款状态，不能进行支付");
					return resultVo;
				}
				//有余额的先判断用户余额是否充足
				if("4".equals(infoVo.getPayType())||"6".equals(infoVo.getPayType())){
					GjfMemberInfo info = memberInfoDubbo.findMember(account);
					if(infoVo.getOnlinePayAmount().compareTo(info.getBalanceMoney())==1){
						//如果余额不足就进行资金的调整
						String newOrderSn=DateHelper.dataToString(new Date(), "yyyyMMddHHmmss" + RandUtil.getRandomStr(6));
						infoVo.setOnlinePayAmount(info.getBalanceMoney());
						infoVo.setOfflinePayAmount(infoVo.getOrderTotalAmount().subtract(info.getBalanceMoney()));
						orderInfoDubbo.updateOrderPayMoney(infoVo.getOrderSn(),infoVo.getOnlinePayAmount().doubleValue(),infoVo.getOfflinePayAmount().doubleValue(),newOrderSn);
						infoVo.setOrderSn(newOrderSn);
					}
				}
				
				if (infoVo.getPayType().equals("1") || infoVo.getPayType().equals("4")) {
					// 调用微信支付
					GjfWeiXinPayInfo payInfo=(GjfWeiXinPayInfo) tradeDubbo.findWeiXinBaseInfo("0").getResult();
					String token_id="";
					if("1".equals(orderType)){
						token_id = H5PayUtil.weiXinPay(payInfo,request, infoVo.getOrderSn(),
								infoVo.getOfflinePayAmount().toString(), "购买商品",
								CommonProperties.GJFENG_WEIXIN_NOTIFY_ORDER,
								CommonProperties.GJFENG_WEIXIN_CALLBACK_URL_ORDER, infoVo.getMemberId().getOpenId());
					}else{
						// 调用微信支付
						 token_id = H5PayUtil.weixinSweepPay(infoVo.getStoreId().getPayMchId(),infoVo.getStoreId().getPayKey(),request, 
								infoVo.getOfflinePayAmount().toString().toString(),infoVo.getOrderSn(), "购买商品",CommonProperties.GJFENG_SWEEP_NOTIFY_ORDER);
						resultVo.setResult(token_id);
					}
					
					resultVo.setResult(token_id);
				} else if (infoVo.getPayType().equals("2")||("7".equals(infoVo.getPayType())&&infoVo.getOfflinePayAmount().doubleValue()!=0)||("8".equals(infoVo.getPayType())&&infoVo.getOfflinePayAmount().doubleValue()!=0)) {
					// 调用支付宝支付	
					// 调用支付宝支付
					Map<String, String> map=new HashMap<>();
					Map<String, String> params = OrderInfoUtil2_0.getAppPlayParams(infoVo.getOrderSn(), "下单成功",
							infoVo.getOfflinePayAmount().toString(), "购买商品", AlipayConfig.order_notify);
					String orderParam = OrderInfoUtil2_0.buildOrderParam(params, false);
					String sign = OrderInfoUtil2_0.getSign(params, AlipayConfig.RSA_PRIVATE);
					final String orderInfo = orderParam + "&" + sign + "&sign_type=\"RSA\"";
					map.put("payString", orderInfo);
					resultVo.setResult(map);
									
				} else if (infoVo.getPayType().equals("3")) {
					resultVo = new ResultVo(200, "查询成功",
							projectName + "/appNeed/appWangYinPay?type=3&payMoney="
									+ String.valueOf(infoVo.getOfflinePayAmount().doubleValue()) + "&mobile="
									+ infoVo.getMemberId().getMobile() + "&orderSn=" + infoVo.getOrderSn());
					return resultVo;
				}
			}
		} catch (Exception e) {
			resultVo = LoggerPrint.getResult(e, OrderController.class);
		}
		return resultVo;
	}
	
	
	/**
	 * @描述 我的订单详情
	 * @author Karhs
	 * @date 2017年1月9日
	 * @param orderStatus
	 * @return
	 */
	@RequestMapping(value = "v1_0/detail", method = RequestMethod.POST)
	@ResponseBody
	public Object orderDetail(@RequestParam("orderSn") String orderSn,String account) {	
		try {			
			resultVo = orderInfoDubbo.findOrderDetail(orderSn, account);		
		} catch (Exception e) {
			resultVo = LoggerPrint.getResult(e, OrderController.class);			
		}
		return resultVo;
	}
	
	
	/**
	 * 快捷支付申请
	 */
	@RequestMapping(value="v1_0/yinLPay",method = RequestMethod.POST)
	@ResponseBody
	public Object yinLPay(String orderId,String payMoney,String retUrl,String accNo,String mobile,String account){
		try{
			GjfMemberInfo memberInfo=memberInfoDubbo.findMember(account);
			
			//获取动态秘钥
			String dypass = FastPayDemoTest.getDyPass(orderId);
			if(!BeanUtil.isValid(dypass)){
				return new ResultVo(400, "获取动态秘钥失败", null);
			}
			Map<String, String> fastMap=FastPayDemoTest.fastApply(orderId,dypass,payMoney,mobile,accNo,memberInfo.getName(),memberInfo.getIdCard(), retUrl);
			if(fastMap==null){
				return new ResultVo(400, "快捷支付请求失败", null);
			}
			if(!"00".equals(fastMap.get("resultCode"))){
				return new ResultVo(400, fastMap.get("resultDesc"), null);
			}
			if("00".equals(fastMap.get("resultCode"))){
				return new ResultVo(200, "预下单成功", fastMap);
			}
			
		}catch(Exception e){
			e.printStackTrace();
		}
		return new ResultVo(400, "预下单失败", null);
	}
			
	/**
	 * 快捷支付确认
	 */
	@RequestMapping(value="v1_0/yinLPayCofirom",method = RequestMethod.POST)
	@ResponseBody
	public Object yinLPayCofirom(String orderId,String payMoney,String verifyCode,String accNo,String mobile,String account){
		try{		
			GjfMemberInfo memberInfo=memberInfoDubbo.findMember(account);
			
			//获取动态秘钥
			String dypass = FastPayDemoTest.getDyPass(orderId);
			if(!BeanUtil.isValid(dypass)){
				return new ResultVo(400, "获取动态秘钥失败", null);
			}
			Map<String, String> fastMap=FastPayDemoTest.fastConfirm(orderId, dypass, verifyCode,payMoney, mobile, accNo,memberInfo.getName(),memberInfo.getIdCard());
			if(fastMap==null){
				return new ResultVo(400, "支付请求失败", null);
			}
			if(!"00".equals(fastMap.get("resultCode"))){				
				return new ResultVo(400, fastMap.get("resultDesc"), null);
			}
			if("00".equals(fastMap.get("resultCode"))){
				return new ResultVo(200, "支付成功", fastMap);
			}
			
		}catch(Exception e){
			e.printStackTrace();
		}
		return new ResultVo(400, "预下单失败", null);
	}


}
