package cc.messcat.gjfeng.service;

import java.math.BigDecimal;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import cc.messcat.gjfeng.common.exception.MyException;
import cc.messcat.gjfeng.common.util.BeanUtil;
import cc.messcat.gjfeng.common.util.DateHelper;
import cc.messcat.gjfeng.common.util.ObjValid;
import cc.messcat.gjfeng.common.util.StringUtil;
import cc.messcat.gjfeng.common.vo.app.ResultVo;
import cc.messcat.gjfeng.dao.GjfBenefitInfoDao;
import cc.messcat.gjfeng.entity.GjfBenefitDay;
import cc.messcat.gjfeng.entity.GjfErrorInfo;
import cc.messcat.gjfeng.entity.GjfMemberDiviNumHistory;
import cc.messcat.gjfeng.entity.GjfMemberInfo;
import cc.messcat.gjfeng.entity.GjfStoreInfo;

@Service("gjfBenefitNotifyService")
public class GjfBenefitNotifyServiceImpl implements GjfBenefitNotifyService {

	@Autowired
	@Qualifier("gjfBenefitInfoDao")
	private GjfBenefitInfoDao gjfBenefitInfoDao;

	@Autowired
	@Qualifier("gjfBenefitInfoService")
	private GjfBenefitInfoService gjfBenefitInfoService;


	/*
	 * 每天24点计算返回所有用户所获得的分红，已供于手动和自动发放
	 * 
	 * @see cc.messcat.gjfeng.service.GjfBenefitNotifyService#
	 * updateMemberBenefitNotify(java.lang.String, java.lang.String,
	 * java.lang.Double, java.lang.Double)
	 */
	@Override
	public ResultVo updateMemberBenefitNotify() throws NumberFormatException, SQLException {
		// 调用存储过程
		System.out.println("调用“每天24点计算返回所有用户所获得的分红”存储过程");
		gjfBenefitInfoDao.updateBenefit();
		return new ResultVo(200, "统计成功", null);
	}

	/*
	 * 每天定时24点计算当天代理所获得的分红
	 * 
	 * @see cc.messcat.gjfeng.service.GjfBenefitInfoService#
	 * updateAgentBenefitByDayNotify()
	 */
	@Override
	public ResultVo updateAgentBenefitByDayNotify() throws NumberFormatException, SQLException {
		// 调用存储过程
		gjfBenefitInfoDao.updateAgentBenefitNotify();
		return new ResultVo(200, "统计成功", null);
	}

	/*
	 * 手动或自动发放会员或商家分红
	 * 
	 * @see cc.messcat.gjfeng.service.GjfBenefitNotifyService#updateBenefit()
	 */
	@Override
	public ResultVo updateBenefit(String account,String activityType) {
		// 1.判断是否今天已经发放了昨天的，如果没有则进行发放
		synchronized ("updateBenefit") {
			Map<String, Object> attrs = new HashMap<>();
			attrs.put("tradeDay", DateHelper.dataToString(DateHelper.getDateByCalculateDays(new Date(), -1), "yyyyMMdd"));
			GjfBenefitDay benefitDay = gjfBenefitInfoDao.query(GjfBenefitDay.class, attrs);
			if (ObjValid.isNotValid(benefitDay)) {
				return new ResultVo(400, "发放失败,没有统计数据", null);
			}
			/*if (benefitDay.getTradeStatus().equals("1")) {
				return new ResultVo(400, "发放失败,昨天分红已经发放成功了", null);
			}*/
			//查询特殊分红人底下会员
			if(BeanUtil.isValid(account)){
				
				attrs.remove("tradeDay");
				attrs.put("mobile", account);
				attrs.put("isDel", "1");
				attrs.put("status", "1");
				attrs.put("isDivi", "1");
				GjfMemberInfo member=gjfBenefitInfoDao.query(GjfMemberInfo.class, attrs);
				if(!BeanUtil.isValid(member)){
					return new ResultVo(400, "用户不存在或用户不可参与分红", null);
				}
				
				Set<Integer> personal=new HashSet<>();
				personal.add(member.getId().intValue());
				personal=findSepcialPersonals(personal,new ArrayList<>(personal));
				gjfBenefitInfoDao.updateMemberBenefit(benefitDay,new ArrayList<>(personal),account,activityType);
				
			}else{

				//查询总报表和福利派发报表统计记录，以便于修改
				gjfBenefitInfoDao.updateMemberBenefit(benefitDay,null,null,activityType);
			}
			//云南扣除分红权
			//addMemberDeductHistory();
			
		}
		return new ResultVo(200, "发放成功", null);
	}
	
	/**获取用户下级
	 * @return
	 */
	public Set<Integer> findSepcialPersonals(Set<Integer> personal,List<Integer> superId){
		int size=personal.size();
		List<Integer> subSuperId=new ArrayList<>();
	
		for(Integer memId:superId){	
			List<Integer> spId=gjfBenefitInfoDao.findAllMemberSuperId(memId);
			personal.addAll(spId);
			subSuperId.addAll(spId);		
		}	
		
		if(personal.size()>size){
			findSepcialPersonals(personal,subSuperId);
		}	
		return personal;
	}	
	
	/*
	 * 手动结算发放代理分红
	 * 
	 * @see
	 * cc.messcat.gjfeng.service.GjfBenefitNotifyService#updateAgentBenefit()
	 */
	@Override
	public ResultVo updateAgentBenefit(Long memberId, String token) {
		synchronized (token) {
			// 每天的统计时间禁止发放操作
			try {
				/*DateHelper.getMinBetween(DateHelper.stringToDate("2017-3-3 00:01:10", "yyyy-MM-dd HH:mm:ss"),
					DateHelper.stringToDate("2017-3-2 23:59:10", "yyyy-MM-dd HH:mm:ss"));*/
				return gjfBenefitInfoDao.updateAgentBenefit(memberId, token);
			} catch (Exception e) {
				e.printStackTrace();
				throw new MyException(400, "方法失败", null);
			}

		}
	}

	/*
	 * 保存错误信息
	 * 
	 * @see
	 * cc.messcat.gjfeng.service.GjfBenefitNotifyService#saveErrMsg(cc.messcat.
	 * gjfeng.entity.GjfErrorInfo)
	 */
	@Override
	public ResultVo saveErrMsg(GjfErrorInfo errorInfo) {
		gjfBenefitInfoDao.save(errorInfo);
		return new ResultVo(200, "保存成功", null);
	}

	/**
	 * 添加用户扣减历史
	 */
	@Override
	public ResultVo addMemberDeductHistory() {
		//或今天分红用户id
		List<Integer> list=gjfBenefitInfoDao.findAllMemberId();
		if(BeanUtil.isValid(list)){
			for(Integer memId:list){
				//获取用户信息
				Map<String, Object> attrs=new HashMap<>();
				attrs.put("id", Long.valueOf(memId));
				GjfMemberInfo memberInfo=gjfBenefitInfoDao.query(GjfMemberInfo.class, attrs);
				if(BeanUtil.isValid(memberInfo)){
					//获取已经使用的积分
					BigDecimal userPoint=memberInfo.getCumulativeMoney().subtract(memberInfo.getConsumptionMoney());
					//获取使用积分和上次扣减的差额
					BigDecimal dedcutMoney=userPoint.subtract(memberInfo.getLastTimeDiviMoney());
					//上次扣减时的积分
					BigDecimal dedcutPoint=new BigDecimal(0.00);
					//扣减分红权
					double dedcutDiviNum=0;
					//如果使用的积分大于500小于10000
					if(userPoint.doubleValue()>=500&&userPoint.doubleValue()<=10000){
						if(dedcutMoney.doubleValue()>=500){
							dedcutDiviNum=Math.floor(dedcutMoney.divide(new BigDecimal(500), 6, BigDecimal.ROUND_DOWN).doubleValue());
							dedcutPoint=new BigDecimal(dedcutDiviNum*500);
						}
					}else if(userPoint.doubleValue()>10000&&userPoint.doubleValue()<=1000000){
						if(dedcutMoney.doubleValue()>10000&&dedcutMoney.doubleValue()<=1000000){
							dedcutMoney=dedcutMoney.subtract(new BigDecimal(10000));
							dedcutDiviNum=20+Math.floor(dedcutMoney.divide(new BigDecimal(1000), 6, BigDecimal.ROUND_DOWN).doubleValue());
							dedcutPoint=new BigDecimal(20*500+Math.floor(dedcutMoney.divide(new BigDecimal(1000), 6, BigDecimal.ROUND_DOWN).doubleValue())*1000);
						}else if(dedcutMoney.doubleValue()>1000000){
							dedcutMoney=dedcutMoney.subtract(new BigDecimal(1000000));
							dedcutDiviNum=1010+Math.floor(dedcutMoney.divide(new BigDecimal(5000), 6, BigDecimal.ROUND_DOWN).doubleValue());
							dedcutPoint=new BigDecimal(20*500+990*1000+Math.floor(dedcutMoney.divide(new BigDecimal(5000), 6, BigDecimal.ROUND_DOWN).doubleValue())*5000);
						}else if(dedcutMoney.doubleValue()>=1000&&dedcutMoney.doubleValue()<=10000){
							dedcutDiviNum=Math.floor(dedcutMoney.divide(new BigDecimal(1000), 6, BigDecimal.ROUND_DOWN).doubleValue());
							dedcutPoint=new BigDecimal(Math.floor(dedcutMoney.divide(new BigDecimal(1000), 6, BigDecimal.ROUND_DOWN).doubleValue())*1000);
						}
					}else{
						if(dedcutMoney.doubleValue()>1000000){
							dedcutMoney=dedcutMoney.subtract(new BigDecimal(1000000));
							dedcutDiviNum=1010+Math.floor(dedcutMoney.divide(new BigDecimal(5000), 6, BigDecimal.ROUND_DOWN).doubleValue());
							dedcutPoint=new BigDecimal(20*500+990*1000+Math.floor(dedcutMoney.divide(new BigDecimal(5000), 6, BigDecimal.ROUND_DOWN).doubleValue())*5000);
						}else if(dedcutMoney.doubleValue()<1000000&&dedcutMoney.doubleValue()>5000){
							dedcutDiviNum=Math.floor(dedcutMoney.divide(new BigDecimal(5000), 6, BigDecimal.ROUND_DOWN).doubleValue());
							dedcutPoint=new BigDecimal(Math.floor(dedcutMoney.divide(new BigDecimal(5000), 6, BigDecimal.ROUND_DOWN).doubleValue())*5000);
						}
					}
					//添加用户扣减记录
					if(dedcutDiviNum!=0){
						GjfMemberDiviNumHistory memHistory=new GjfMemberDiviNumHistory();
						memHistory.setDedcutAmount(dedcutPoint);
						memHistory.setDeductDiviNum(new BigDecimal(dedcutDiviNum));
						memHistory.setMemberDiviNumBf(memberInfo.getDividendsNum());
						memHistory.setMemberId(memberInfo.getId());
						memHistory.setMemberMobile(memberInfo.getMobile());
						memHistory.setMemberName(memberInfo.getName());
						memHistory.setTradeStatus("1");
						memHistory.setTradeType("0");
						memHistory.setAddTime(new Date());
						memHistory.setMemberDiviNumBf(memberInfo.getLastTimeDiviMoney());
					
						//更改用户信息
						memberInfo.setLastTimeDiviMoney(memberInfo.getLastTimeDiviMoney().add(dedcutPoint));
						memberInfo.setDeductDiviNum(memberInfo.getDeductDiviNum().add(new BigDecimal(dedcutDiviNum)));
						//减去要扣减的分红权
						BigDecimal diviNum=memberInfo.getDividendsNum().subtract(new BigDecimal(dedcutDiviNum));
						if(diviNum.doubleValue()>0){
							memberInfo.setDividendsNum(memberInfo.getDividendsNum().subtract(new BigDecimal(dedcutDiviNum)));
						}else{
							memberInfo.setDividendsNum(new BigDecimal(0.000000));
						}
						
						
						memHistory.setMemberDiviNumAf(memberInfo.getLastTimeDiviMoney());
						memHistory.setMemberDiviNumAf(memberInfo.getDividendsNum());
						gjfBenefitInfoDao.save(memHistory);
						gjfBenefitInfoDao.update(memberInfo);
					}
					
				}
				
				//如果是商家
				if("1".equals(memberInfo.getType())){
					attrs.remove("id");
					attrs.put("memberId.id", Long.valueOf(memId));
					//获取店铺信息
					GjfStoreInfo storeInfo=gjfBenefitInfoDao.query(GjfStoreInfo.class, attrs);
					if(BeanUtil.isValid(storeInfo)){
						//获取已经使用的积分
						BigDecimal storeUserPoint=storeInfo.getStoreDividendsTotalMoney();
						//获取使用积分和上次扣减的差额
						BigDecimal storeDedcutMoney=storeUserPoint.subtract(storeInfo.getLastTimeDiviMoney());
						//上次扣减时的积分
						BigDecimal storeDedcutPoint=new BigDecimal(0.00);
						//扣减分红权
						double storeDedcutDiviNum=0;
						//如果使用的积分大于500小于10000
						if(storeUserPoint.doubleValue()>=500&&storeUserPoint.doubleValue()<=10000){
							if(storeDedcutMoney.doubleValue()>=500){
								storeDedcutDiviNum=Math.floor(storeDedcutMoney.divide(new BigDecimal(500), 6, BigDecimal.ROUND_DOWN).doubleValue());
								storeDedcutPoint=new BigDecimal(storeDedcutDiviNum*500);
							}
						}else if(storeUserPoint.doubleValue()>10000&&storeUserPoint.doubleValue()<=1000000){
							if(storeDedcutMoney.doubleValue()>10000&&storeDedcutMoney.doubleValue()<=1000000){
								storeDedcutMoney=storeDedcutMoney.subtract(new BigDecimal(10000));
								storeDedcutDiviNum=20+Math.floor(storeDedcutMoney.divide(new BigDecimal(1000), 6, BigDecimal.ROUND_DOWN).doubleValue());
								storeDedcutPoint=new BigDecimal(20*500+Math.floor(storeDedcutMoney.divide(new BigDecimal(1000), 6, BigDecimal.ROUND_DOWN).doubleValue())*1000);
							}else if(storeDedcutMoney.doubleValue()>1000000){
								storeDedcutMoney=storeDedcutMoney.subtract(new BigDecimal(1000000));
								storeDedcutDiviNum=1010+Math.floor(storeDedcutMoney.divide(new BigDecimal(5000), 6, BigDecimal.ROUND_DOWN).doubleValue());
								storeDedcutPoint=new BigDecimal(20*500+990*1000+Math.floor(storeDedcutMoney.divide(new BigDecimal(5000), 6, BigDecimal.ROUND_DOWN).doubleValue())*5000);
							}else if(storeDedcutMoney.doubleValue()>=1000&&storeDedcutMoney.doubleValue()<=10000){
								storeDedcutDiviNum=Math.floor(storeDedcutMoney.divide(new BigDecimal(5000), 6, BigDecimal.ROUND_DOWN).doubleValue());
								storeDedcutPoint=new BigDecimal(storeDedcutDiviNum*1000);
							}
						}else{
							if(storeDedcutMoney.doubleValue()>1000000){
								storeDedcutMoney=storeDedcutMoney.subtract(new BigDecimal(1000000));
								storeDedcutDiviNum=1010+Math.floor(storeDedcutMoney.divide(new BigDecimal(5000), 6, BigDecimal.ROUND_DOWN).doubleValue());
								storeDedcutPoint=new BigDecimal(20*500+990*1000+Math.floor(storeDedcutMoney.divide(new BigDecimal(5000), 6, BigDecimal.ROUND_DOWN).doubleValue())*5000);
							}else if(storeDedcutMoney.doubleValue()<1000000&&storeDedcutMoney.doubleValue()>5000){
								storeDedcutDiviNum=Math.floor(storeDedcutMoney.divide(new BigDecimal(5000), 6, BigDecimal.ROUND_DOWN).doubleValue());
								storeDedcutPoint=new BigDecimal(storeDedcutDiviNum*5000);
							}
						}
						
						if(storeDedcutDiviNum!=0){
							//添加用户扣减记录
							GjfMemberDiviNumHistory storeMemHistory=new GjfMemberDiviNumHistory();
							storeMemHistory.setDedcutAmount(storeDedcutPoint);
							storeMemHistory.setDeductDiviNum(new BigDecimal(storeDedcutDiviNum));
							storeMemHistory.setMemberDiviNumBf(storeInfo.getStoreDividendsNum());
							storeMemHistory.setMemberId(memberInfo.getId());
							storeMemHistory.setMemberMobile(memberInfo.getMobile());
							storeMemHistory.setMemberName(memberInfo.getName());
							storeMemHistory.setTradeStatus("1");
							storeMemHistory.setTradeType("1");
							storeMemHistory.setAddTime(new Date());
							storeMemHistory.setDedcutDiviTotalMoneyBf(storeInfo.getLastTimeDiviMoney());
							//更新店铺信息
							storeInfo.setLastTimeDiviMoney(storeInfo.getLastTimeDiviMoney().add(storeDedcutPoint));
							storeInfo.setDeductDiviNum(storeInfo.getDeductDiviNum().add(new BigDecimal(storeDedcutDiviNum)));
							//扣减的分红权
							BigDecimal diviNum=storeInfo.getStoreDividendsNum().subtract(new BigDecimal(storeDedcutDiviNum));
							if(diviNum.doubleValue()>0){
								storeInfo.setStoreDividendsNum(storeInfo.getStoreDividendsNum().subtract(new BigDecimal(storeDedcutDiviNum)));
							}else{
								storeInfo.setStoreDividendsNum(new BigDecimal(0.000000));
							}
							
							storeMemHistory.setMemberDiviNumAf(storeInfo.getStoreDividendsNum());
							storeMemHistory.setDedectDiviTotalMoneyAf(storeInfo.getLastTimeDiviMoney());
							gjfBenefitInfoDao.save(storeMemHistory);
							gjfBenefitInfoDao.update(storeInfo);
						}
					}
					
					
				}
			}
		}
		return new ResultVo(200, "更新成功", null);
	}
}
