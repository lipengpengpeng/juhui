package cc.messcat.gjfeng.service.count;

import java.math.BigDecimal;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import cc.messcat.gjfeng.common.bean.Pager;
import cc.messcat.gjfeng.common.exception.MyException;
import cc.messcat.gjfeng.common.util.ObjValid;
import cc.messcat.gjfeng.common.vo.app.ResultVo;
import cc.messcat.gjfeng.dao.count.CountInfoDao;
import cc.messcat.gjfeng.entity.GjfBenefitDay;
import cc.messcat.gjfeng.entity.GjfBenefitHistory;
import cc.messcat.gjfeng.entity.GjfBenefitInfo;
import cc.messcat.gjfeng.entity.GjfBenefitPool;
import cc.messcat.gjfeng.entity.GjfErrorInfo;
import cc.messcat.gjfeng.entity.GjfMemberInfo;
import cc.messcat.gjfeng.entity.GjfMemberTrade;
import cc.messcat.gjfeng.entity.GjfMessageHistory;

@Service("countInfoService")
public class CountInfoServiceImpl implements CountInfoService {

	@Autowired
	@Qualifier("countInfoDao")
	public CountInfoDao countInfoDao;

	/*
	 * 统计会员数量
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#countMemberInfoAmount()
	 */
	@Override
	public ResultVo findMemberAmount(int pageNo, int pageSize) {
		return new ResultVo(200,"查询成功",countInfoDao.findMemberAmount(pageNo, pageSize));
	}

	/*
	 * 根据会员类型统计会员数量
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#findRegularMemberAmount(java.lang.String)
	 */
	@Override
	public ResultVo findMemberAmountByType(String type) {
		return new ResultVo(200,"查询成功",countInfoDao.findMemberAmountByType(type));
	}

	/*
	 * 统计会员下级消费额度
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#findMembersLowLevelConsume(int, int)
	 */
	@SuppressWarnings("unchecked")
	@Override
	public ResultVo findMembersLowLevelConsume(int pageNo, int pageSize) {
		Map<String, Object> attrs = new HashMap<String, Object>();
		attrs.put("status", "1");
		attrs.put("isDel", "1");
		//会员集合
		List<GjfMemberInfo> gjfMemberInfos = countInfoDao.queryList(GjfMemberInfo.class,(pageNo-1)*pageSize,pageSize, "addTime", "desc", attrs);
		//统计每个会员的下级消费额度
		for(GjfMemberInfo gjfMemberInfo:gjfMemberInfos){
			List<GjfMemberInfo> result = this.findLower(gjfMemberInfo.getId());
			BigDecimal lowLevelConsume = new BigDecimal("0.00");
			if (null != result) {
				for(GjfMemberInfo gjfMemberInfo2 : result){
					lowLevelConsume = lowLevelConsume.add(gjfMemberInfo2.getCumulativeMoney());
				}
			}
			gjfMemberInfo.setLowLevelCumulativeMoney(lowLevelConsume);
		}
		Pager pager = new Pager(pageSize, pageNo,Integer.parseInt(String.valueOf(countInfoDao.queryTotalRecord(GjfMemberInfo.class,attrs))),gjfMemberInfos);
		return new ResultVo(200,"查询成功",pager);
	}
	
	@SuppressWarnings("unchecked")
	private List<GjfMemberInfo> findLower(Long id){
		Map<String, Object> attrs = new HashMap<String, Object>();
		attrs.put("superId", id);
		List<GjfMemberInfo> list = countInfoDao.queryList(GjfMemberInfo.class, "addTime", "desc", attrs);
		return list;
	}

	/*
	 * 查询资金池
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#findBenefitPool()
	 */
	@Override
	public ResultVo findBenefitPool() {
		Map<String, Object> attrs = new HashMap<String, Object>();
		return new ResultVo(200,"查询成功",countInfoDao.query(GjfBenefitPool.class, attrs));
	}

	/*
	 * 查询资金池分红记录(GjfBenefitHistory)
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#findBenefitHistory(int, int)
	 */
	@Override
	public ResultVo findBenefitHistory(int pageNo, int pageSize) {
		Pager pager = new Pager(pageSize, pageNo,
				Integer.parseInt(String.valueOf(countInfoDao.queryTotalRecord(GjfBenefitHistory.class,null))),
				countInfoDao.queryList(GjfBenefitHistory.class,(pageNo-1)*pageSize,pageSize, "addTime", "desc",null));
		return new ResultVo(200,"查询成功",pager);
	}

	/*
	 * 查询分红数据
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#findDidiData()
	 */
	@Override
	public ResultVo findDiviData() throws ParseException{
		Map<String, BigDecimal> data = new HashMap<String, BigDecimal>();
		data.put("todayO2OTurnovers", countInfoDao.findTodayO2OTurnover());//今日O2O交易额
		data.put("todayStoreTurnovers", countInfoDao.findTodayStoreTurnover());//今日网上商城交易额
		data.put("unusedCreditLine", countInfoDao.findSellerCreditLine());//商户未使用授信额
		data.put("creditLine", countInfoDao.findCreditLineRecharge());//今天授信充值额
		data.put("BalanceToal", countInfoDao.findMemberBalanceMoney(""));//总剩余余额
		data.put("memberDiviTotal", countInfoDao.findMemberDiviTotal());//会员分红权总额
		data.put("sellerDiviTotal", countInfoDao.findStoreDiviTotal());//商户分红权总额
		data.put("memberDiviOnTime", countInfoDao.findMemberDiviUnitPrice()); //会员实时分红
		data.put("sellerDiviOnTime", countInfoDao.findSellerDiviUnitPrice()); //商户实时分红
		return new ResultVo(200,"查询成功",data);
	}

	/*
	 * 查找短信记录
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#findMessageHistory(int, int)
	 */
	@Override
	public ResultVo findMessageHistory(int pageNo, int pageSize) {
		Pager pager = new Pager(pageSize, pageNo,
				Integer.parseInt(String.valueOf(countInfoDao.queryTotalRecord(GjfMessageHistory.class,null))),
				countInfoDao.queryList(GjfMessageHistory.class,(pageNo-1)*pageSize,pageSize, "sendTime", "desc",null));
		return new ResultVo(200,"查询成功",pager);
	}

	/*
	 * 查询近30天网上商城交易额
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#findAlmostOneMonthStoreTurnover()
	 */
	@Override
	public ResultVo findAlmostOneMonthStoreTurnover() {
		return new ResultVo(200,"查询成功",countInfoDao.findAlmostOneMonthStoreTurnover());
	}

	/*
	 * 查询近30天O2O交易额
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#findAlmostOneMonth020Turnover()
	 */
	@Override
	public ResultVo findAlmostOneMonth020Turnover() {
		return new ResultVo(200,"查询成功",countInfoDao.findAlmostOneMonth020Turnover());
	}

	/*
	 * 查询近30天会员增加数量和趋势
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#findAlmostOneMonthMemberAdd()
	 */
	@Override
	public ResultVo findAlmostOneMonthMemberAdd(String type) {
		return new ResultVo(200,"查询成功",countInfoDao.findAlmostOneMonthMemberAdd(type));
	}

	/*
	 * 查询近三个月会员的消费额（趋势）
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#findAlmostThreeMonthMemberTurnover(java.lang.Long)
	 */
	@Override
	public ResultVo findAlmostThreeMonthMemberTurnover(Long id) {
		if (ObjValid.isNotValid(id)) {
			return new ResultVo(400,"参数错误",null);
		}
		return new ResultVo(200,"查询成功",countInfoDao.findAlmostThreeMonthMemberTurnover(id));
	}

	/*
	 * 统计资金池收入支出
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#findCashPool(java.lang.String)
	 */
	@Override
	public ResultVo findCashPool() {
		Map<String, BigDecimal> map = new HashMap<String, BigDecimal>();
		//会员池
		map.put("8", countInfoDao.findCashPool("8"));
		map.put("0", countInfoDao.findCashPool("0"));
		//商户池
		map.put("9", countInfoDao.findCashPool("9"));
		map.put("1", countInfoDao.findCashPool("1"));
		//市代池
		map.put("13", countInfoDao.findCashPool("13"));
		map.put("5", countInfoDao.findCashPool("5"));
		//区代池
		map.put("14", countInfoDao.findCashPool("14"));
		map.put("6", countInfoDao.findCashPool("6"));
		//个代池
		map.put("15", countInfoDao.findCashPool("15"));
		map.put("7", countInfoDao.findCashPool("7"));
		//平台池
		map.put("10", countInfoDao.findCashPool("10"));
		map.put("16", countInfoDao.findCashPool("16"));
		return new ResultVo(200,"查询成功",map);
	}

	/*
	 * 查询总报表
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#findSummaryReport()
	 */
	@Override
	public ResultVo findSummaryReport(int pageNo,int pageSize,String addTime,String endTime,String ste) {
		return new ResultVo(200, "查询成功", countInfoDao.findSummaryReport(pageNo, pageSize, addTime,endTime,ste));
	}

	/*
	 * 查询让利日报表
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#findBenefitReport(int, int)
	 */
	@Override
	public ResultVo findBenefitReport(int pageNo, int pageSize,String addTime,String endTime,String ste) {
		return new ResultVo(200, "查询成功", countInfoDao.findBenefitReport(pageNo, pageSize, addTime,endTime,ste));
	}

	/*
	 * 福利产出日报表
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#findWealOutputReport(int, int)
	 */
	@Override
	public ResultVo findWealOutputReport(int pageNo,int pageSize,String addTime,String endTime,String ste) {
		return new ResultVo(200, "查询成功", countInfoDao.findWealOutputReport(pageNo, pageSize, addTime,endTime,ste));
	}

	/*
	 * 福利派发报表
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#findWealPayoutReport(int, int)
	 */
	@Override
	public ResultVo findWealPayoutReport(int pageNo, int pageSize,String addTime,String endTime,String ste) {
		return new ResultVo(200, "查询成功", countInfoDao.findWealPayoutReport(pageNo, pageSize, addTime,endTime,ste));
	}

	/*
	 * 提现日报表
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#findWithdrawReport(int, int)
	 */
	@Override
	public ResultVo findWithdrawReport(int pageNo, int pageSize,String addTime,String endTime,String ste) {
		return new ResultVo(200, "查询成功", countInfoDao.findWithdrawReport(pageNo, pageSize, addTime,endTime,ste));
	}

	/*
	 * 查询订单累计成交额
	 * 	 * @see cc.messcat.gjfeng.service.count.CountInfoService#findOrderTotalAmount()
	 */
	@Override
	public ResultVo findOrderTotalAmount() {
		return new ResultVo(200,"查询成功",countInfoDao.findOrderTotalAmount());
	}

	/*
	 * 查询实时分红余额
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#findOntimeDiviAmount(java.lang.String)
	 */
	@Override
	public ResultVo findOntimeDiviAmount(String type) {
		if (ObjValid.isNotValid(type)) {
			throw  new MyException(400,"参数错误",null);
		}
		return new ResultVo(200,"查询成功",countInfoDao.findDiviMoneyBla(type));
	}

	
	/*****每天定时统计********/
	/* 
	 * 统计总报表
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#updateSummaryReport()
	 */
	@Override
	public ResultVo updateSummaryReport() {
		return countInfoDao.updateSummaryReport();
	}

	/* 
	 * 统计让利日报表
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#updateBenefitReport()
	 */
	@Override
	public ResultVo updateBenefitReport() {
		return countInfoDao.updateBenefitReport();
	}

	/* 
	 * 统计福利产出日报表
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#updateWealOutputReport()
	 */
	@Override
	public ResultVo updateWealOutputReport() {
		return countInfoDao.updateWealOutputReport();
	}

	/* 
	 * 统计福利派发报表
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#updateWealPayoutReport()
	 */
	@Override
	public ResultVo updateWealPayoutReport() {
		return countInfoDao.updateWealPayoutReport();
	}

	/* 
	 * 统计提现日报表
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#updateWithdrawReport()
	 */
	@Override
	public ResultVo updateWithdrawReport() {
		return countInfoDao.updateWithdrawReport();
	}
	
	/*
	 * 统计资金池表
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#updatePoolReport()
	 */
	public ResultVo updatePoolReport(){
		return countInfoDao.updatePoolReport();
	}
	

	/* 
	 * 修改总报表和福利派发报表的福利派发为实际派发额
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#updateSummaryAndPayoutReport()
	 */
	@Override
	public ResultVo updateSummaryAndPayoutReport(){
		return countInfoDao.updateSummaryAndPayoutReport();
	}

	/*
	 * 查询授信充值额
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#findCreditLineRecharge()
	 */
	@SuppressWarnings("unchecked")
	@Override
	public ResultVo findCreditLineRecharge(int pageNo,int pageSize) throws ParseException{
		Map<String, Object> attrs = new HashMap<String, Object>();
		Map<String, Object> result = new HashMap<String, Object>();
		result.put("todayCreditLineRecharge", countInfoDao.findCreditLineRecharge());//当日授信充值额
		result.put("totalCreditLineRecharge", countInfoDao.findCreditLineRechargeTotal()); //查询总授信充值额度
		result.put("monthCreditLineRecharge", countInfoDao.findAlmostOneMonthCLRecharge()); //近30天授信充值额度情况
		attrs.put("tradeType", "0");
		Pager pager = new Pager(pageSize, pageNo,
				Integer.parseInt(String.valueOf(countInfoDao.queryTotalRecord(GjfMemberTrade.class,attrs))),
				countInfoDao.queryList(GjfMemberTrade.class,(pageNo-1)*pageSize,pageSize, "addTime", "desc",attrs));
		result.put("pager", pager);
		return new ResultVo(200,"查询成功",result);
	}

	/*
	 * 查询商户未使用授信充值额  分页  模糊查询
	 */
	@Override
	public ResultVo findStoreCreditLine(String storeNum, String storeName, String memeberName, int pageNo,
			int pageSize,String orderType) {
		return new ResultVo(200,"查询成功",countInfoDao.findStoreCreditLine(storeNum, storeName, memeberName, pageNo, pageSize,orderType));
	}

	/*
	 * 查询错误信息
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#findErrorMsg(int, int)
	 */
	@Override
	public ResultVo findErrorMsg(int pageNo, int pageSize) {
		Pager pager = new Pager(pageSize, pageNo,
				Integer.parseInt(String.valueOf(countInfoDao.queryTotalRecord(GjfErrorInfo.class,null))),
				countInfoDao.queryList(GjfErrorInfo.class,(pageNo-1)*pageSize,pageSize, "errTime", "desc",null));
		return new ResultVo(200,"查询成功",pager);
	}

	/*
	 * 查询区域业绩
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#findRegionalPerformance(int, int, java.lang.Long, java.lang.Long, java.lang.Long)
	 */
	@Override
	public ResultVo findRegionalPerformance(int pageNo, int pageSize,Long provinceId,Long cityId,Long areaId,String startTime,String endTime) {
		return new ResultVo(200,"查询成功",countInfoDao.findRegionalPerformance(pageNo, pageSize, provinceId, cityId, areaId,startTime,endTime));
	}
	
	/*
	 *  统计当前区域业绩
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#findCountRegionalPerformance(java.lang.Long, java.lang.Long, java.lang.Long, java.lang.String, java.lang.String)
	 */
	@Override
	public ResultVo findCountRegionalPerformance(Long provinceId, Long cityId, Long areaId, String startTime,
			String endTime) {
		return new ResultVo(200,"查询成功",countInfoDao.findCountRegionalPerformance( provinceId, cityId, areaId,startTime,endTime));
	}

	/*
	 * 分红趋势
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#AlmostOneMonthBenefitDay(java.lang.String)
	 */
	@Override
	public ResultVo findAlmostOneMonthBenefitDay(String type) {
		return new ResultVo(200,"查询成功",countInfoDao.findAlmostOneMonthBenefitDay(type));
	}
	
	/*
	 * 今日O2O订单
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#findTodayO2OOrders(int, int, java.lang.String, java.lang.String, java.lang.String)
	 */
	@Override
	public ResultVo findTodayO2OOrders(int pageNo, int pageSize) {
		return new ResultVo(200,"查询成功",countInfoDao.findTodayO2OOrders(pageNo, pageSize));
	}

	/*
	 * 查询池收入
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#findPoolIn(int, int, java.lang.String, java.lang.String)
	 */
	@Override
	public ResultVo findPoolIn(int pageNo, int pageSize, String op, String type) {
		return new ResultVo(200,"查询成功",countInfoDao.findPoolIn(pageNo, pageSize, op, type));
	}

	/*
	 * 查询池支出
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#findPoolOut(int, int, java.lang.String, java.lang.String)
	 */
	@Override
	public ResultVo findPoolOut(int pageNo, int pageSize, String op, String type) {
		return new ResultVo(200,"查询成功",countInfoDao.findPoolOut(pageNo, pageSize, op, type));
	}

	/*
	 * 查询池收入支出明细
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#findPoolInDetail(int, int, java.lang.String, java.lang.String)
	 */
	@Override
	public ResultVo findPoolDetail(int pageNo, int pageSize, String addTime, String type) {
		return new ResultVo(200,"查询成功",countInfoDao.findPoolDetail(pageNo, pageSize, addTime, type));
	}

	/*
	 * 查询代理分红支出明细
	 * @see cc.messcat.gjfeng.service.count.CountInfoService#findTradeDiviByAgent(int, int, java.lang.String, java.lang.String)
	 */
	@Override
	public ResultVo findTradeDiviByAgent(int pageNo, int pageSize, String addTime, String type) {
		return new ResultVo(200,"查询成功",countInfoDao.findTradeDiviByAgent(pageNo, pageSize, addTime, type));
	}

	/**
	 * 统计每天的交易数据
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public ResultVo countDataByTime(int pageNo, int pageSize, String bigenTime, String endTime) {
		Map<String, Object> attrs=new HashMap<>();		
		attrs.put("tradeStatus", "1");
		//查询让利每天让利信息
		/*Pager pager = new Pager(pageSize, pageNo,
				Integer.parseInt(String.valueOf(countInfoDao.queryTotalRecord(GjfBenefitDay.class,attrs))),
				countInfoDao.queryList(GjfBenefitDay.class,(pageNo-1)*pageSize,pageSize, "addTime", "desc",attrs));*/
		Pager pager =countInfoDao.findBenefitDay(pageNo,pageSize,bigenTime,endTime,"");
		List<GjfBenefitDay> benList=pager.getResultList();
		List list0=new ArrayList<>();
		
		//记录上一次剩余金额
		BigDecimal recoedRemMoney=new BigDecimal(0.00);
		//记录上次可参与分红权数
		BigDecimal recoedMemberDiv=new BigDecimal(0.00);
		//记录上一次商户可以参与分红权
		BigDecimal recoedMechDiv=new BigDecimal(0.00);
		//记录上一次会员余额剩余
		BigDecimal shenYuMoney=new BigDecimal(0.00);
		//迭代让利基本信息
		for(int i=0;i<benList.size();i++){
			//保存基本信息集合
			Map<String, Object> map=new HashMap<>();
			
			//获取让利信息
			GjfBenefitDay benefit=benList.get(i);
			//保存每天让利信息
			map.put("benefitDay", benefit);
			//统计每天的交易信息
			Map<String, BigDecimal> map0=countInfoDao.countBenefitByTime(benefit.getTradeDay());
			map.put("info", map0);
			//日营业额
			BigDecimal sumBeDateMoney=map0.get("sumBeWpay").add(map0.get("sumBeHpay").add(map0.get("sumBeSpay")));
			map.put("sumBeDateMoney", sumBeDateMoney);
			//充值额度
			BigDecimal sumChEDMoney=map0.get("sumSXWpay").divide(new BigDecimal(0.12),2,BigDecimal.ROUND_DOWN).add(map0.get("sumSXHpay").divide(new BigDecimal(0.12),2,BigDecimal.ROUND_UP))
						           .add(map0.get("sumSXHTpay").divide(new BigDecimal(0.12),2,BigDecimal.ROUND_UP));
			map.put("sumChEDMoney", sumChEDMoney);
			//消耗额度
			BigDecimal sumConQuotaMoney=map0.get("sumBeSpay").divide(new BigDecimal(0.12),2,BigDecimal.ROUND_UP);
			map.put("sumConQuotaMoney", sumConQuotaMoney);			
			//剩余
			if(i==0){
			   recoedRemMoney=sumChEDMoney.subtract(sumConQuotaMoney);
			   map.put("sumRemMoney", sumChEDMoney.subtract(sumConQuotaMoney));
			}else{
				map.put("sumRemMoney", recoedRemMoney.add(sumChEDMoney).subtract(sumConQuotaMoney));
				recoedRemMoney=recoedRemMoney.add(sumChEDMoney).subtract(sumConQuotaMoney);
			}			
			//微信支付总金额
			BigDecimal sumTotalWpay=map0.get("sumBeWpay").add(map0.get("sumSXWpay").add(map0.get("sumOrderWpay")));
			map.put("sumTotalWpay", sumTotalWpay);	
			//网银支付总金额
			BigDecimal sumTotalHpay=map0.get("sumBeHpay").add(map0.get("sumOrderHpay")).add(map0.get("sumSXWpay"));
			map.put("sumTotalHpay", sumTotalHpay);
			
			 benefit.getMemberDiviNum();			
			//会员新增分红权
			if(i==0){
				recoedMemberDiv=benefit.getMemberDiviNum();
				map.put("sumNewDiv", 0);	
			}else{
				
				map.put("sumNewDiv", recoedMemberDiv.subtract(benefit.getMemberDiviNum()));	
				recoedMemberDiv=benefit.getMemberDiviNum();
			}
			//会员差异
			BigDecimal sumMemDiff= benefit.getMemberIncomeMoney().subtract(benefit.getMemberRealMoney());
			map.put("sumMemDiff",sumMemDiff);			
			//商户新增分红权
			if(i==0){
				recoedMechDiv=benefit.getMerchantsDiviNum();
				map.put("sumNewMerchDiv", 0);	
			}else{
				
				map.put("sumNewMerchDiv", recoedMechDiv.subtract(benefit.getMerchantsDiviNum()));
				recoedMechDiv=benefit.getMerchantsDiviNum();
			}
			//商户差异
			BigDecimal sumMerchDiff=benefit.getMerchantsIncomeMoney().subtract(benefit.getMerchantsRealMoney());
			map.put("sumMerchDiff", sumMerchDiff);
			//日发放额
			BigDecimal sumDateIssueMoney=benefit.getMemberRealMoney().add(benefit.getMerchantsRealMoney()).add(map0.get("directChMoney")).add(map0.get("directChMoney"));
			map.put("sumDateIssueMoney", sumDateIssueMoney);
			//商户会员池
			BigDecimal sumMemMerPool= benefit.getMemberIncomeMoney().add(benefit.getMerchantsIncomeMoney());
			map.put("sumMemMerPool",sumMemMerPool);
			//商户会员池
			BigDecimal sumDirectMoney=map0.get("directMeMoney").add(map0.get("directChMoney"));
			map.put("sumDirectMoney",sumDirectMoney);			
			//差异
			map.put("sumChaYiMoney",sumMemMerPool.add(sumMemMerPool).subtract(sumDateIssueMoney) );
			//提现金额
			map.put("sumChaMoney", map0.get("tradeMoney").divide(new BigDecimal(0.8),2,BigDecimal.ROUND_UP));
			//责任消费剩余余额
			map.put("sumRespMoney", map0.get("insMoney").subtract(map0.get("sumOrderDpay")));
			//代理收入
			BigDecimal sumDailiMoney=sumBeDateMoney.multiply(new BigDecimal(0.85)).setScale(2, BigDecimal.ROUND_UP).multiply(new BigDecimal(0.1)).setScale(2, BigDecimal.ROUND_UP);
			map.put("sumDailiMoney", sumDailiMoney);
			//平台池总营收
			BigDecimal sumPTPoolMoney=sumBeDateMoney.multiply(new BigDecimal(0.85)).setScale(2, BigDecimal.ROUND_UP).multiply(new BigDecimal(0.1)).setScale(2, BigDecimal.ROUND_UP).add((sumBeDateMoney.multiply(new BigDecimal(0.15)).setScale(2, BigDecimal.ROUND_UP).multiply(new BigDecimal(0.3).setScale(2, BigDecimal.ROUND_UP))));
			map.put("sumPTPoolMoney", sumPTPoolMoney);
			//总营收
			BigDecimal sumTotalYSMoney=sumMemDiff.add(sumMerchDiff);
			map.put("sumTotalYSMoney", sumTotalYSMoney);
			//实际收款
			BigDecimal sumRealSMoney=sumTotalWpay.add(sumTotalHpay);
			map.put("sumRealSMoney", sumRealSMoney);
			//预日营收
			BigDecimal sumDateYSMoney=sumRealSMoney.subtract((sumDateIssueMoney.multiply(new BigDecimal(0.8)).setScale(2, BigDecimal.ROUND_UP)));
			map.put("sumDateYSMoney", sumDateYSMoney);
			//实际应收
			BigDecimal sumRealNeedMoney=sumDateYSMoney.subtract(map0.get("tradeMoney"));
			map.put("sumRealNeedMoney", sumRealNeedMoney);
			//会员余额剩余
			if(i==0){
				shenYuMoney=sumDateIssueMoney.subtract(map0.get("tradeMoney").subtract(map0.get("sumOrderYpay")));
				map.put("sumShenYuMoney",shenYuMoney);
				
			}else{
				map.put("sumShenYuMoney", shenYuMoney.add(sumDateIssueMoney).subtract(map0.get("tradeMoney").subtract(map0.get("sumOrderYpay"))));
				shenYuMoney=shenYuMoney.add(sumDateIssueMoney).subtract(map0.get("tradeMoney").subtract(map0.get("sumOrderYpay")));
			}
			//把统计信息添加到集合中
			list0.add(map);
		}
		pager.setResultList(list0);
		return new ResultVo(200,"查询成功",pager);
	}

	/**
	 * 统计总额
	 */
	@SuppressWarnings("rawtypes")
	@Override
	public ResultVo totalDataInfo(String beginTime, String endTime) {
		Map map=countInfoDao.countTotalDataInfo(beginTime, endTime);
		return new ResultVo(200,"查询成功",map);
	}
	
}
