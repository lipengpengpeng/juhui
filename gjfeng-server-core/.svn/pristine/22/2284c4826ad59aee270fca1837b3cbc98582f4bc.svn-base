package cc.messcat.gjfeng.service.benefit;

import java.awt.LinearGradientPaint;
import java.math.BigDecimal;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import cc.messcat.gjfeng.common.constant.CommonStatus;
import cc.messcat.gjfeng.common.exception.MyException;
import cc.messcat.gjfeng.common.util.DateHelper;
import cc.messcat.gjfeng.common.util.ObjValid;
import cc.messcat.gjfeng.common.util.Sha256;
import cc.messcat.gjfeng.common.util.StringUtil;
import cc.messcat.gjfeng.common.vo.app.MemberTradeBenefitVo;
import cc.messcat.gjfeng.common.vo.app.ResultVo;
import cc.messcat.gjfeng.dao.benefit.GjfBenefitInfoDao;
import cc.messcat.gjfeng.entity.GjfBenefitHistory;
import cc.messcat.gjfeng.entity.GjfBenefitInfo;
import cc.messcat.gjfeng.entity.GjfBenefitPool;
import cc.messcat.gjfeng.entity.GjfMemberCollect;
import cc.messcat.gjfeng.entity.GjfMemberInfo;
import cc.messcat.gjfeng.entity.GjfMemberTradeBenefit;
import cc.messcat.gjfeng.entity.GjfMemberTradeDetail;
import cc.messcat.gjfeng.entity.GjfMemberTradeDivi;
import cc.messcat.gjfeng.entity.GjfMemberTradeDiviHistory;
import cc.messcat.gjfeng.entity.GjfMemberTradeIndi;
import cc.messcat.gjfeng.entity.GjfSetDividends;
import cc.messcat.gjfeng.entity.GjfStoreInfo;

@Service("gjfBenefitInfoService")
public class GjfBenefitInfoServiceImpl implements GjfBenefitInfoService {

	@Autowired
	@Qualifier("gjfBenefitInfoDao")
	private GjfBenefitInfoDao gjfBenefitInfoDao;

	/*
	 * 用户每消费一笔，就会计算一次其所获得的分红权
	 * 
	 * @see cc.messcat.gjfeng.service.GjfBenefitNotifyService#
	 * updateMemberBenefitNotify(java.lang.String, java.lang.String,
	 * java.lang.Double, java.lang.Double)
	 */
	@Override
	public ResultVo updateMemberDividendsNumNotify(String membersMobile, String merchantsMobile,
			Double consumptionMoney, String tradeNo) {
		if (StringUtil.isBlank(membersMobile) || StringUtil.isBlank(merchantsMobile)
				|| ObjValid.isNotValid(consumptionMoney)) {
			throw new MyException(400, "数据有误", null);
		}

		double totalBenefit = new BigDecimal(consumptionMoney * 0.12).setScale(2, BigDecimal.ROUND_UP).doubleValue();

		BigDecimal subPlaSys = new BigDecimal(0.00);

		// 1.更新用户的分红权
		BigDecimal[] directBenefit1 = updateMemberBenefitNum(membersMobile, "0", consumptionMoney, totalBenefit,
				tradeNo, subPlaSys);	
		/*BigDecimal[] directBenefit1=updateMemberBenefitNumCanSetInBack(membersMobile, "0", consumptionMoney, totalBenefit,
				tradeNo, subPlaSys);*/
		// 2.更新商家的分红权
		subPlaSys = directBenefit1[2];
		updateMemberBenefitNum(merchantsMobile, "1", consumptionMoney, totalBenefit, tradeNo, subPlaSys);
		//updateMemberBenefitNumCanSetInBack(merchantsMobile, "1", consumptionMoney, totalBenefit,tradeNo, subPlaSys);
		// 3.直推会员分红
		updateBenefit(directBenefit1[0], membersMobile, "0", "0", tradeNo);
		// 4.直推商家分红
		updateBenefit(directBenefit1[1], merchantsMobile, "1", "0", tradeNo);

		// 5.计算个代分红
		addIndiBenefit(merchantsMobile, tradeNo, consumptionMoney, totalBenefit);
		return null;
	}

	/*
	 * 用户每消费一笔，就会计算一次其所获得的分红权
	 * 
	 * @see cc.messcat.gjfeng.service.GjfBenefitNotifyService#
	 * updateMemberBenefitNum(java.lang.String, java.lang.Double)
	 */
	@Override
	public BigDecimal[] updateMemberBenefitNum(String membersMobile, String memberType, Double consumptionMoney,
			Double totalBenefit, String tradeNo, BigDecimal subSysPla) {

		BigDecimal diviNum = new BigDecimal(0.000000);

		if (memberType.equals("0")) {
			double cumulativeMoney = 0.00;
			// 1.求目前剩余的用户(商家)计算分红权的额度，并加上当次消费额度
			Map<String, Object> attrs = new HashMap<String, Object>();
			attrs.put("mobile", membersMobile);
			GjfMemberInfo gjfMemberInfo = gjfBenefitInfoDao.query(GjfMemberInfo.class, attrs);

			// 2.求用户累计消费额度
			double bfCumulativeMoney = gjfMemberInfo.getCumulativeMoney().doubleValue();
			BigDecimal benefitMoney = new BigDecimal(totalBenefit).setScale(2, BigDecimal.ROUND_UP);

			gjfMemberInfo.setCumulativeMoney(gjfMemberInfo.getCumulativeMoney().add(new BigDecimal(consumptionMoney)));
			gjfMemberInfo
					.setConsumptionMoney(gjfMemberInfo.getConsumptionMoney().add(new BigDecimal(consumptionMoney)));
			cumulativeMoney = gjfMemberInfo.getCumulativeMoney().doubleValue();

			// 3.根据目前的分红权额度以及相对应的累积消费额度计算分红权个数
			if (bfCumulativeMoney <= 10000) {
				// 3.1 小于1万 500一个分红权
				if (cumulativeMoney <= 10000) {
					BigDecimal a = new BigDecimal(consumptionMoney).divide(new BigDecimal(500), 6,
							BigDecimal.ROUND_DOWN);
					diviNum = a;

					GjfMemberTradeDivi diviHistory = new GjfMemberTradeDivi(null, gjfMemberInfo, tradeNo + "-1",
							diviNum, benefitMoney, new BigDecimal(0.00), new BigDecimal(consumptionMoney), new Date(),
							null, null, "0", "1", "0", "");
					diviHistory.setToken(Sha256.getSha256Hash(diviHistory.getDiviNo(), diviHistory.getDiviStatus(),
							CommonStatus.SIGN_KEY_NUM));
					gjfBenefitInfoDao.save(diviHistory);
				} else if (cumulativeMoney > 10000 && cumulativeMoney <= 10000 * 100) {
					BigDecimal a = new BigDecimal(10000 - bfCumulativeMoney).divide(new BigDecimal(500), 6,
							BigDecimal.ROUND_DOWN);
					BigDecimal b = new BigDecimal((cumulativeMoney - 10000)).divide(new BigDecimal(1000), 6,
							BigDecimal.ROUND_DOWN);
					diviNum = a.add(b);

					GjfMemberTradeDivi diviHistory = new GjfMemberTradeDivi(null, gjfMemberInfo, tradeNo + "-1",
							diviNum, benefitMoney, new BigDecimal(0.00), new BigDecimal(consumptionMoney), new Date(),
							null, null, "0", "2", "0", "");
					diviHistory.setToken(Sha256.getSha256Hash(diviHistory.getDiviNo(), diviHistory.getDiviStatus(),
							CommonStatus.SIGN_KEY_NUM));
					gjfBenefitInfoDao.save(diviHistory);
				} else if (cumulativeMoney > 10000 * 100) {
					BigDecimal a = new BigDecimal((10000 - bfCumulativeMoney)).divide(new BigDecimal(500), 6,
							BigDecimal.ROUND_DOWN);
					BigDecimal b = new BigDecimal((10000 * 100 - 10000)).divide(new BigDecimal(1000), 6,
							BigDecimal.ROUND_DOWN);
					BigDecimal c = new BigDecimal((cumulativeMoney - 10000 * 100)).divide(new BigDecimal(5000), 6,
							BigDecimal.ROUND_DOWN);
					diviNum = a.add(b).add(c);

					GjfMemberTradeDivi diviHistory = new GjfMemberTradeDivi(null, gjfMemberInfo, tradeNo + "-1",
							diviNum, benefitMoney, new BigDecimal(0.00), new BigDecimal(consumptionMoney), new Date(),
							null, null, "0", "3", "0", "");
					diviHistory.setToken(Sha256.getSha256Hash(diviHistory.getDiviNo(), diviHistory.getDiviStatus(),
							CommonStatus.SIGN_KEY_NUM));
					gjfBenefitInfoDao.save(diviHistory);
				}
			} else if (bfCumulativeMoney > 10000 && bfCumulativeMoney <= 10000 * 100) {
				// 3.2 1万-100万 1000一个分红权
				if (cumulativeMoney > 10000 && cumulativeMoney <= 10000 * 100) {
					BigDecimal a = new BigDecimal(consumptionMoney).divide(new BigDecimal(1000), 6,
							BigDecimal.ROUND_DOWN);
					diviNum = a;

					GjfMemberTradeDivi diviHistory = new GjfMemberTradeDivi(null, gjfMemberInfo, tradeNo + "-1",
							diviNum, benefitMoney, new BigDecimal(0.00), new BigDecimal(consumptionMoney), new Date(),
							null, null, "0", "2", "0", "");
					diviHistory.setToken(Sha256.getSha256Hash(diviHistory.getDiviNo(), diviHistory.getDiviStatus(),
							CommonStatus.SIGN_KEY_NUM));
					gjfBenefitInfoDao.save(diviHistory);
				} else if (cumulativeMoney > 10000 * 100) {
					BigDecimal a = new BigDecimal((10000 * 100 - bfCumulativeMoney)).divide(new BigDecimal(1000), 6,
							BigDecimal.ROUND_DOWN);
					BigDecimal b = new BigDecimal((cumulativeMoney - 10000 * 100)).divide(new BigDecimal(5000), 6,
							BigDecimal.ROUND_DOWN);
					diviNum = a.add(b);

					GjfMemberTradeDivi diviHistory = new GjfMemberTradeDivi(null, gjfMemberInfo, tradeNo + "-1",
							diviNum, benefitMoney, new BigDecimal(0.00), new BigDecimal(consumptionMoney), new Date(),
							null, null, "0", "3", "0", "");
					diviHistory.setToken(Sha256.getSha256Hash(diviHistory.getDiviNo(), diviHistory.getDiviStatus(),
							CommonStatus.SIGN_KEY_NUM));
					gjfBenefitInfoDao.save(diviHistory);
				}
			} else if (bfCumulativeMoney > 10000 * 100) {
				// 3.3 100万以上 5000一个分红权
				BigDecimal a = new BigDecimal(consumptionMoney).divide(new BigDecimal(5000), 6, BigDecimal.ROUND_DOWN);
				diviNum = a;

				GjfMemberTradeDivi diviHistory = new GjfMemberTradeDivi(null, gjfMemberInfo, tradeNo + "-1", diviNum,
						benefitMoney, new BigDecimal(0.00), new BigDecimal(consumptionMoney), new Date(), null, null,
						"0", "3", "0", "");
				diviHistory.setToken(Sha256.getSha256Hash(diviHistory.getDiviNo(), diviHistory.getDiviStatus(),
						CommonStatus.SIGN_KEY_NUM));
				gjfBenefitInfoDao.save(diviHistory);
			}
			gjfMemberInfo
					.setDividendsNum(gjfMemberInfo.getDividendsNum().add(diviNum).setScale(6, BigDecimal.ROUND_DOWN));

			// 4.增加分红权获取记录
			gjfBenefitInfoDao.update(gjfMemberInfo);

		} else {
			Map<String, Object> storeAttrs = new HashMap<String, Object>();
			storeAttrs.put("memberId.mobile", membersMobile);
			GjfStoreInfo gjfStoreInfo = gjfBenefitInfoDao.query(GjfStoreInfo.class, storeAttrs);

			double bfTotalBenefitMoney = gjfStoreInfo.getStoreBenefitTotalMoney().doubleValue();
			BigDecimal benefitMoney = new BigDecimal(totalBenefit).setScale(2, BigDecimal.ROUND_UP);

			gjfStoreInfo.setStoreSaleTotalMoney(
					gjfStoreInfo.getStoreSaleTotalMoney().add(new BigDecimal(consumptionMoney)));
			gjfStoreInfo.setStoreBenefitTotalMoney(gjfStoreInfo.getStoreBenefitTotalMoney().add(benefitMoney));
			gjfStoreInfo
					.setStoreDividendsTotalMoneyBla(gjfStoreInfo.getStoreDividendsTotalMoneyBla().add(benefitMoney));
			double totalBenefitMoney = gjfStoreInfo.getStoreBenefitTotalMoney().doubleValue();

			// 3.根据目前的分红权额度以及相对应的累积消费额度计算分红权个数
			if (bfTotalBenefitMoney <= 10000) {
				// 3.1 小于1万 500一个分红权
				if (totalBenefitMoney <= 10000) {
					BigDecimal a = new BigDecimal(benefitMoney.doubleValue()).divide(new BigDecimal(500), 6,
							BigDecimal.ROUND_DOWN);
					diviNum = a;

					GjfMemberTradeDivi diviHistory = new GjfMemberTradeDivi(null, gjfStoreInfo.getMemberId(),
							tradeNo + "-2", diviNum, benefitMoney, new BigDecimal(0.00),
							new BigDecimal(consumptionMoney), new Date(), null, null, "0", "1", "1", "");
					diviHistory.setToken(Sha256.getSha256Hash(diviHistory.getDiviNo(), diviHistory.getDiviStatus(),
							CommonStatus.SIGN_KEY_NUM));
					gjfBenefitInfoDao.save(diviHistory);
				} else if (totalBenefitMoney > 10000 && totalBenefitMoney <= 10000 * 100) {
					BigDecimal a = new BigDecimal((10000 - bfTotalBenefitMoney)).divide(new BigDecimal(500), 6,
							BigDecimal.ROUND_DOWN);
					BigDecimal b = new BigDecimal((totalBenefitMoney - 10000)).divide(new BigDecimal(1000), 6,
							BigDecimal.ROUND_DOWN);
					diviNum = a.add(b);

					GjfMemberTradeDivi diviHistory = new GjfMemberTradeDivi(null, gjfStoreInfo.getMemberId(),
							tradeNo + "-2", diviNum, benefitMoney, new BigDecimal(0.00),
							new BigDecimal(consumptionMoney), new Date(), null, null, "0", "2", "1", "");
					diviHistory.setToken(Sha256.getSha256Hash(diviHistory.getDiviNo(), diviHistory.getDiviStatus(),
							CommonStatus.SIGN_KEY_NUM));
					gjfBenefitInfoDao.save(diviHistory);
				} else if (totalBenefitMoney > 10000 * 100) {
					BigDecimal a = new BigDecimal((10000 - bfTotalBenefitMoney)).divide(new BigDecimal(500), 6,
							BigDecimal.ROUND_DOWN);
					BigDecimal b = new BigDecimal((10000 * 100 - 10000)).divide(new BigDecimal(1000), 6,
							BigDecimal.ROUND_DOWN);
					BigDecimal c = new BigDecimal((totalBenefitMoney - 10000 * 100)).divide(new BigDecimal(5000), 6,
							BigDecimal.ROUND_DOWN);					
					diviNum = a.add(b).add(c);

					GjfMemberTradeDivi diviHistory = new GjfMemberTradeDivi(null, gjfStoreInfo.getMemberId(),
							tradeNo + "-2", diviNum, benefitMoney, new BigDecimal(0.00),
							new BigDecimal(consumptionMoney), new Date(), null, null, "0", "3", "1", "");
					diviHistory.setToken(Sha256.getSha256Hash(diviHistory.getDiviNo(), diviHistory.getDiviStatus(),
							CommonStatus.SIGN_KEY_NUM));
					gjfBenefitInfoDao.save(diviHistory);
				}
			} else if (bfTotalBenefitMoney > 10000 && bfTotalBenefitMoney <= 10000 * 100) {
				// 3.2 1万-100万 1000一个分红权
				if (totalBenefitMoney > 10000 && totalBenefitMoney <= 10000 * 100) {
					BigDecimal a = new BigDecimal(benefitMoney.doubleValue()).divide(new BigDecimal(1000), 6,
							BigDecimal.ROUND_DOWN);
					diviNum = a;

					GjfMemberTradeDivi diviHistory = new GjfMemberTradeDivi(null, gjfStoreInfo.getMemberId(),
							tradeNo + "-2", diviNum, benefitMoney, new BigDecimal(0.00),
							new BigDecimal(consumptionMoney), new Date(), null, null, "0", "2", "1", "");
					diviHistory.setToken(Sha256.getSha256Hash(diviHistory.getDiviNo(), diviHistory.getDiviStatus(),
							CommonStatus.SIGN_KEY_NUM));
					gjfBenefitInfoDao.save(diviHistory);
				} else if (totalBenefitMoney > 10000 * 100) {
					BigDecimal a = new BigDecimal((10000 * 100 - bfTotalBenefitMoney)).divide(new BigDecimal(1000), 6,
							BigDecimal.ROUND_DOWN);
					BigDecimal b = new BigDecimal((totalBenefitMoney - 10000 * 100)).divide(new BigDecimal(5000), 6,
							BigDecimal.ROUND_DOWN);
					;
					diviNum = a.add(b);

					GjfMemberTradeDivi diviHistory = new GjfMemberTradeDivi(null, gjfStoreInfo.getMemberId(),
							tradeNo + "-2", diviNum, benefitMoney, new BigDecimal(0.00),
							new BigDecimal(consumptionMoney), new Date(), null, null, "0", "3", "1", "");
					diviHistory.setToken(Sha256.getSha256Hash(diviHistory.getDiviNo(), diviHistory.getDiviStatus(),
							CommonStatus.SIGN_KEY_NUM));
					gjfBenefitInfoDao.save(diviHistory);
				}
			} else if (bfTotalBenefitMoney > 10000 * 100) {
				// 3.3 100万以上 5000一个分红权
				BigDecimal a = new BigDecimal(benefitMoney.doubleValue()).divide(new BigDecimal(5000), 6,
						BigDecimal.ROUND_DOWN);
				diviNum = a;

				GjfMemberTradeDivi diviHistory = new GjfMemberTradeDivi(null, gjfStoreInfo.getMemberId(),
						tradeNo + "-2", diviNum, benefitMoney, new BigDecimal(0.00), new BigDecimal(consumptionMoney),
						new Date(), null, null, "0", "3", "1", "");
				diviHistory.setToken(Sha256.getSha256Hash(diviHistory.getDiviNo(), diviHistory.getDiviStatus(),
						CommonStatus.SIGN_KEY_NUM));
				gjfBenefitInfoDao.save(diviHistory);
			}
			gjfStoreInfo.setStoreDividendsNum(
					gjfStoreInfo.getStoreDividendsNum().add(diviNum).setScale(6, BigDecimal.ROUND_DOWN));

			gjfBenefitInfoDao.update(gjfStoreInfo);
		}

		// 修改商家让利表记录的分红权额
		Map<String, Object> attrsBenefit = new HashMap<String, Object>();
		Map<String, Object> propsBenefit = new HashMap<String, Object>();
		attrsBenefit.put("tradeNo", tradeNo);
		if (memberType.equals("0")) {
			propsBenefit.put("memberDividendsNum", diviNum);
		} else {
			propsBenefit.put("merchantsDividendsNum", diviNum);
		}
		gjfBenefitInfoDao.update(GjfMemberTradeBenefit.class, propsBenefit, attrsBenefit);

		// 修改资金池
		BigDecimal[] directBenefit = updateBenefitPool(memberType, totalBenefit, subSysPla);
		return directBenefit;
	}

	/*
	 * 计算用户每笔消费所产生的分红权额度，并返还给客户和商家
	 * 
	 * @see cc.messcat.gjfeng.service.GjfBenefitNotifyService#updateBenefit(
	 * java.lang.Double, java.lang.String)
	 */
	@Override
	public BigDecimal updateBenefit(BigDecimal totalBenefit, String membersMobile, String memberType, String actType,
			String tradeNo) {
		// 1.直推会员or商家分红，求出会员or商家的上一级
		Date curDate = new Date();
		Map<String, Object> attrs = new HashMap<String, Object>();
		attrs.put("mobile", membersMobile);
		GjfMemberInfo gjfMemberInfo = gjfBenefitInfoDao.query(GjfMemberInfo.class, attrs);
		GjfBenefitInfo gjfBenefitInfo = findByType(actType);
		if (ObjValid.isValid(gjfMemberInfo) && ObjValid.isValid(gjfMemberInfo.getSuperId()) && actType.equals("0")) {
			Map<String, Object> supMemberAttrs = new HashMap<String, Object>();
			supMemberAttrs.put("id", gjfMemberInfo.getSuperId());
			supMemberAttrs.put("status", "1");
			supMemberAttrs.put("isDel", "1");
			supMemberAttrs.put("isDivi", "1");
			GjfMemberInfo superMember = gjfBenefitInfoDao.query(GjfMemberInfo.class, supMemberAttrs);
			if (ObjValid.isNotValid(superMember)) {
				return null;
			}
			double ratio = memberType.equals("0") ? gjfBenefitInfo.getDirectMembersRatio()
					: gjfBenefitInfo.getDirectMerchantsRatio();
			// 修改分红额度--累计分红额、余额、提现额增加
			if (memberType.equals("0")) {
				superMember.setDirectMemberTotalMoney(
						superMember.getDirectMemberTotalMoney().add(totalBenefit).setScale(2, BigDecimal.ROUND_DOWN));
			} else {
				superMember.setDirectMerchantsTotalMoney(superMember.getDirectMerchantsTotalMoney().add(totalBenefit));
			}
			superMember.setBalanceMoney(superMember.getBalanceMoney().add(totalBenefit));
			superMember.setWithdrawalMoney(superMember.getWithdrawalMoney().add(totalBenefit));
			gjfBenefitInfoDao.update(superMember);

			// 添加交易流水
			Date date = new Date();
			GjfMemberTradeDiviHistory gjfMemberTradeDiviHistory = new GjfMemberTradeDiviHistory(null, superMember,
					DateHelper.dataToString(curDate, "yyyyMMddHHmmss")
							+ String.valueOf(System.currentTimeMillis()).substring(0, 5),
					totalBenefit, new BigDecimal(0.00), new BigDecimal(0.00), new BigDecimal(0.00),
					new BigDecimal(ratio), date, date, memberType.equals("0") ? "0" : "1", "1",
					memberType.equals("0") ? "直推会员分红" : "直推商家分红",
					Sha256.getSha256Hash(superMember.getId().toString(), "2016", CommonStatus.SIGN_KEY_NUM));
			gjfBenefitInfoDao.save(gjfMemberTradeDiviHistory);

			// 添加余额和提现额度变更流水
			GjfMemberTradeDetail detail1 = new GjfMemberTradeDetail(null, superMember, tradeNo + "-1", totalBenefit,
					new Date(), new Date(), "0", "1", gjfMemberTradeDiviHistory.getTradeTrmo());
			GjfMemberTradeDetail detail2 = new GjfMemberTradeDetail(null, superMember, tradeNo + "-2", totalBenefit,
					new Date(), new Date(), "1", "1", gjfMemberTradeDiviHistory.getTradeTrmo());
			gjfBenefitInfoDao.save(detail1);
			gjfBenefitInfoDao.save(detail2);

			// 修改资金池流水和资金池金额
			Map<String, Object> attrsPool = new HashMap<String, Object>();
			GjfBenefitPool benefitPool = gjfBenefitInfoDao.query(GjfBenefitPool.class, attrsPool);
			if (ObjValid.isNotValid(benefitPool)) {
				throw new MyException(400, "资金池数据异常", null);
			}

			// 修改商家让利表记录的分红权额
			Map<String, Object> attrsBenefit = new HashMap<String, Object>();
			Map<String, Object> propsBenefit = new HashMap<String, Object>();
			attrsBenefit.put("tradeNo", tradeNo);
			if (memberType.equals("0")) {
				propsBenefit.put("directMemberMoney", totalBenefit);
				propsBenefit.put("directMember.id", superMember.getId());

				benefitPool.setDirectMemberSysPoolCur(benefitPool.getDirectMemberSysPoolCur().subtract(totalBenefit));
				// 5.直推会员池
				GjfBenefitHistory benefitHistory4 = new GjfBenefitHistory(null, totalBenefit,
						benefitPool.getDirectMemberSysPoolCur(),
						benefitPool.getDirectMemberSysPoolCur().subtract(totalBenefit), new BigDecimal(0.00), curDate,
						"3", null, curDate, "1");

				gjfBenefitInfoDao.update(benefitPool);
				gjfBenefitInfoDao.save(benefitHistory4);
			} else {
				propsBenefit.put("directMerchantsMoney", totalBenefit);
				propsBenefit.put("directMerchants.id", superMember.getId());

				benefitPool.setDirectMerchantsSysPoolCur(
						benefitPool.getDirectMerchantsSysPoolCur().subtract(totalBenefit));
				// 5.直推商家池
				GjfBenefitHistory benefitHistory5 = new GjfBenefitHistory(null, totalBenefit,
						benefitPool.getDirectMerchantsSysPoolCur(),
						benefitPool.getDirectMerchantsSysPoolCur().subtract(totalBenefit), new BigDecimal(0.00),
						curDate, "4", null, curDate, "1");

				gjfBenefitInfoDao.update(benefitPool);
				gjfBenefitInfoDao.save(benefitHistory5);
			}
			gjfBenefitInfoDao.update(GjfMemberTradeBenefit.class, propsBenefit, attrsBenefit);

		}
		return null;
	}

	/**
	 * @描述 修改资金池金额
	 * @author Karhs
	 * @date 2017年2月15日
	 */
	public BigDecimal[] updateBenefitPool(String memberType, double totalBenefit, BigDecimal subPlaSys) {
		Map<String, Object> attrs = new HashMap<String, Object>();
		GjfBenefitPool benefitPool = gjfBenefitInfoDao.query(GjfBenefitPool.class, attrs);
		if (ObjValid.isNotValid(benefitPool)) {
			throw new MyException(400, "资金池数据异常", null);
		}
		GjfBenefitInfo gjfBenefitInfo = findByType(memberType);
		if (ObjValid.isNotValid(gjfBenefitInfo)) {
			throw new MyException(400, "配置数据异常", null);
		}
		Date curDate = new Date();
		BigDecimal benefit = new BigDecimal(totalBenefit);
		BigDecimal sysBenefit = new BigDecimal(benefit.doubleValue() * gjfBenefitInfo.getSysRatio())
				.divide(new BigDecimal(100), 2, BigDecimal.ROUND_DOWN); // 系统占比
		BigDecimal poolBenefit = new BigDecimal(sysBenefit.doubleValue() * gjfBenefitInfo.getDiviPoolsRatio())
				.divide(new BigDecimal(100), 2, BigDecimal.ROUND_DOWN); // 分红池占比

		BigDecimal[] directBenefit = new BigDecimal[] { new BigDecimal(0.00), new BigDecimal(0.00),
				new BigDecimal(0.00) }; // 直推会员或商家的让利金额

		if (memberType.equals("0")) {
			BigDecimal directMembersBenefit = new BigDecimal(
					sysBenefit.doubleValue() * gjfBenefitInfo.getDirectMembersRatio()).divide(new BigDecimal(100), 2,
							BigDecimal.ROUND_DOWN); // 直推用户占比
			BigDecimal directMerchantsBenefit = new BigDecimal(
					benefit.divide(new BigDecimal(0.12),2,BigDecimal.ROUND_DOWN).doubleValue() * gjfBenefitInfo.getDirectMerchantsRatio()).divide(new BigDecimal(1000), 2,
							BigDecimal.ROUND_DOWN); // 直推商家占比
			
			/*BigDecimal directMerchantsBenefit = new BigDecimal(
					sysBenefit.doubleValue()* gjfBenefitInfo.getDirectMerchantsRatio()).divide(new BigDecimal(1000), 2,
							BigDecimal.ROUND_DOWN);*/ // 直推商家占比
			BigDecimal agentBenefit = new BigDecimal(sysBenefit.doubleValue() * gjfBenefitInfo.getAgentRatio())
					.divide(new BigDecimal(100), 2, BigDecimal.ROUND_DOWN); // 代理商占比

			directBenefit[0] = directMembersBenefit;
			directBenefit[1] = directMerchantsBenefit;

			// 1.会员池
			GjfBenefitHistory benefitHistory1 = new GjfBenefitHistory(null, poolBenefit,
					benefitPool.getMemberSysPoolCur(), benefitPool.getMemberSysPoolCur().add(poolBenefit),
					new BigDecimal(0.00), curDate, "8", null, curDate, "1");

			benefitPool.setMemberSysPoolCur(benefitPool.getMemberSysPoolCur().add(poolBenefit));
			benefitPool.setMemberSysPoolTotal(benefitPool.getMemberSysPoolTotal().add(poolBenefit));

			// 4.直推会员池
			GjfBenefitHistory benefitHistory4 = new GjfBenefitHistory(null, directMembersBenefit,
					benefitPool.getDirectMemberSysPoolCur(),
					benefitPool.getDirectMemberSysPoolCur().add(directMembersBenefit), new BigDecimal(0.00), curDate,
					"11", null, curDate, "1");

			// 5.直推商家池
			GjfBenefitHistory benefitHistory5 = new GjfBenefitHistory(null, directMerchantsBenefit,
					benefitPool.getDirectMerchantsSysPoolCur(),
					benefitPool.getDirectMerchantsSysPoolCur().add(directMerchantsBenefit), new BigDecimal(0.00),
					curDate, "12", null, curDate, "1");

			benefitPool.setDirectMemberSysPoolCur(benefitPool.getDirectMemberSysPoolCur().add(directMembersBenefit));
			benefitPool
					.setDirectMemberSysPoolTotal(benefitPool.getDirectMemberSysPoolTotal().add(directMembersBenefit));
			benefitPool.setDirectMerchantsSysPoolCur(
					benefitPool.getDirectMerchantsSysPoolCur().add(directMerchantsBenefit));
			benefitPool.setDirectMerchantsSysPoolTotal(
					benefitPool.getDirectMerchantsSysPoolTotal().add(directMerchantsBenefit));
			benefitPool.setAgentSysPoolCur(benefitPool.getAgentSysPoolCur().add(agentBenefit));
			benefitPool.setAgentSysPoolTotal(benefitPool.getAgentSysPoolTotal().add(agentBenefit));

			BigDecimal agenCity = new BigDecimal(sysBenefit.doubleValue() * gjfBenefitInfo.getAgentCityRatio())
					.divide(new BigDecimal(100), 2, BigDecimal.ROUND_DOWN);
			BigDecimal agenArea = new BigDecimal(sysBenefit.doubleValue() * gjfBenefitInfo.getAgentAreaRatio())
					.divide(new BigDecimal(100), 2, BigDecimal.ROUND_DOWN);
			BigDecimal agenIndi = new BigDecimal(sysBenefit.doubleValue() * gjfBenefitInfo.getAgentIndiRatio())
					.divide(new BigDecimal(100), 2, BigDecimal.ROUND_DOWN);

			// 6.市代分红池
			GjfBenefitHistory benefitHistory6 = new GjfBenefitHistory(null, agenCity,
					benefitPool.getAgentSysCityPoolCur(), benefitPool.getAgentSysCityPoolCur().add(agenCity),
					new BigDecimal(0.00), curDate, "13", null, curDate, "1");

			// 7.区代分红池
			GjfBenefitHistory benefitHistory7 = new GjfBenefitHistory(null, agenArea,
					benefitPool.getAgentSysAreaPoolCur(), benefitPool.getAgentSysAreaPoolCur().add(agenArea),
					new BigDecimal(0.00), curDate, "14", null, curDate, "1");

			// 8.个代分红池
			GjfBenefitHistory benefitHistory8 = new GjfBenefitHistory(null, agenIndi,
					benefitPool.getAgentSysIndiPoolCur(), benefitPool.getAgentSysIndiPoolCur().add(agenIndi),
					new BigDecimal(0.00), curDate, "15", null, curDate, "1");

			// 1.2判断代理+平台+直推会员+直推商家+会员分红池=会员系统让利差
			subPlaSys = benefit.subtract(poolBenefit).subtract(directMembersBenefit).subtract(directMerchantsBenefit)
					.subtract(agenCity).subtract(agenArea).subtract(agenIndi);

			benefitPool.setAgentSysCityPoolCur(benefitPool.getAgentSysCityPoolCur().add(agenCity));
			benefitPool.setAgentSysCityPoolTotal(benefitPool.getAgentSysCityPoolTotal().add(agenCity));
			benefitPool.setAgentSysAreaPoolCur(benefitPool.getAgentSysAreaPoolCur().add(agenArea));
			benefitPool.setAgentSysAreaPoolTotal(benefitPool.getAgentSysAreaPoolTotal().add(agenArea));
			benefitPool.setAgentSysIndiPoolCur(benefitPool.getAgentSysIndiPoolCur().add(agenIndi));
			benefitPool.setAgentSysIndiPoolTotal(benefitPool.getAgentSysIndiPoolTotal().add(agenIndi));

			gjfBenefitInfoDao.save(benefitHistory1);
			gjfBenefitInfoDao.save(benefitHistory4);
			gjfBenefitInfoDao.save(benefitHistory5);
			gjfBenefitInfoDao.save(benefitHistory6);
			gjfBenefitInfoDao.save(benefitHistory7);
			gjfBenefitInfoDao.save(benefitHistory8);

		} else {
			// 2.商家池
			GjfBenefitHistory benefitHistory2 = new GjfBenefitHistory(null, poolBenefit,
					benefitPool.getMerchantSysPoolCur(), benefitPool.getMerchantSysPoolCur().add(poolBenefit),
					new BigDecimal(0.00), curDate, "9", null, curDate, "1");

			// 1.3判断客户平台+客户分红池=客户系统让利差
			subPlaSys = subPlaSys.subtract(poolBenefit);
			// 3.平台池
			GjfBenefitHistory benefitHistory3 = new GjfBenefitHistory(null, subPlaSys,
					benefitPool.getPlatformSysPoolCur(), benefitPool.getPlatformSysPoolCur().add(subPlaSys),
					new BigDecimal(0.00), curDate, "10", null, curDate, "1");

			benefitPool.setMerchantSysPoolCur(benefitPool.getMerchantSysPoolCur().add(poolBenefit));
			benefitPool.setMerchantSysPoolTotal(benefitPool.getMerchantSysPoolTotal().add(poolBenefit));

			benefitPool.setPlatformSysPoolCur(benefitPool.getPlatformSysPoolCur().add(subPlaSys));
			benefitPool.setPlatformSysPoolTotal(benefitPool.getPlatformSysPoolTotal().add(subPlaSys));

			gjfBenefitInfoDao.save(benefitHistory2);
			gjfBenefitInfoDao.save(benefitHistory3);
		}
		directBenefit[2] = subPlaSys;
		// 添加资金池流水
		gjfBenefitInfoDao.update(benefitPool);
		return directBenefit;
	}

	/**
	 * @描述 根据类型查询让利配置信息
	 * @author Karhs
	 * @date 2017年3月7日
	 * @param findType
	 * @return
	 */
	public GjfBenefitInfo findByType(String findType) {
		Map<String, Object> attrs = new HashMap<String, Object>();
		attrs.put("ratioType", findType);
		return gjfBenefitInfoDao.query(GjfBenefitInfo.class, attrs);
	}

	/**
	 * @描述 添加让利给个代记录
	 * @author Karhs
	 * @throws ParseException
	 * @date 2017年3月7日
	 */
	public void addIndiBenefit(String merchantsMobile, String tradeNo, double buyMoney, double benefitMoney) {
		// 1.查询所有的用户信息
		Map<String, Object> attrs = new HashMap<String, Object>();
		attrs.put("mobile", merchantsMobile);
		GjfMemberInfo gjfMemberInfo = gjfBenefitInfoDao.query(GjfMemberInfo.class, attrs);
		List<String> listArr = gjfBenefitInfoDao.findAllMemberType();
		if (null != listArr && listArr.size() > 0) {
			Map<String, String[]> dataMap = new HashMap<String, String[]>();
			for (String str : listArr) {
				if (StringUtil.isNotBlank(str)) {
					String[] strArr = str.split(",");
					String memberId = strArr[0];
					dataMap.put(memberId, strArr);
				}
			}
			List<String> personal = findPersonalIds(gjfMemberInfo.getId().toString(), dataMap);
			if (null != personal && personal.size() > 0) {
				for (String personalId : personal) {
					GjfMemberInfo memberInfo = (GjfMemberInfo) gjfBenefitInfoDao.get(Long.parseLong(personalId),
							GjfMemberInfo.class.getName());
					GjfMemberTradeIndi memberTradeIndi = new GjfMemberTradeIndi(null, tradeNo, memberInfo,
							gjfMemberInfo, new BigDecimal(buyMoney).setScale(2, BigDecimal.ROUND_DOWN),
							new BigDecimal(benefitMoney).setScale(2, BigDecimal.ROUND_DOWN), new Date());
					gjfBenefitInfoDao.save(memberTradeIndi);
				}
			}
		}
	}

	/**
	 * 返回个代们的id list，如果为空则找不到个代们
	 * 
	 * @param memberId
	 * @param map
	 * @return
	 * @throws ParseException
	 */
	public static List<String> findPersonalIds(String memberId, Map<String, String[]> map) {

		// 会员不存在
		if (memberId == null || memberId.length() == 0) {
			return null;
		}

		// 列表为空，没得聊了
		if (map == null || map.isEmpty()) {
			return null;
		}

		// 该会员找不到则返回
		String[] theMember = map.get(memberId);
		if (theMember == null) {
			return null;
		}

		// 默认加入已加载队列
		Map<String, String[]> foundMap = new HashMap<String, String[]>();
		foundMap.put(memberId, theMember);

		// 该会员上级id
		String fatherId = theMember[1];
		if (fatherId.equals("0")) {
			return null;
		}
		List<String> personal = findPersonalIds(fatherId, map, foundMap, null);
		return personal;
	}

	/**
	 * 
	 * @param memberId
	 * @param map
	 * @param foundMap
	 * @param personal
	 * @return
	 * @throws ParseException
	 */
	private static List<String> findPersonalIds(String memberId, Map<String, String[]> map,
			Map<String, String[]> foundMap, List<String> personal) {

		// 该会员找不到则返回
		String[] theMember = map.get(memberId);
		if (theMember == null) {
			return personal;
		}

		// 已经找到个代们了
		if (personal != null && personal.size() == 2) {
			return personal;
		}

		// 如果已加载队列里已经有这个会员了，说明已经循环了
		if (foundMap.containsKey(memberId)) {
			return personal;
		}

		// 默认加入已加载队列
		foundMap.put(memberId, theMember);

		// 如果是个贷，1代表个贷
		String isPersonal = theMember[2];

		if ("1".equals(isPersonal) && !theMember[3].equals("0") && !theMember[4].equals("0")) {
			// 判断代理是否过期
			int day1 = -1;
			int day2 = 1;
			String startDate = theMember[3];
			String endDate = theMember[4];
			String status = theMember[5];
			String isDel = theMember[6];
			if (status.equals("1") && isDel.equals("1")) {
				try {
					String curDate = DateHelper.dataToString(new Date(), "yyyy-MM-dd");
					day1 = DateHelper.daysBetween(startDate, curDate);
					day2 = DateHelper.daysBetween(endDate, curDate);
				} catch (ParseException e) {
					e.printStackTrace();
				}
				if (day1 >= 0 && day2 <= 0) {
					if (personal == null) {
						personal = new ArrayList<String>();
					}
					personal.add(memberId);
				}
			}
		}
		// 该会员上级id
		String fatherId = theMember[1];
		if (fatherId != null && fatherId.length() > 0 && !fatherId.equals("0")) {
			personal = findPersonalIds(fatherId, map, foundMap, personal);
		}
		return personal;
	}

	/*
	 * 用户每消费一笔，就会计算一次其所获得的分红权（可在后台设置）
	 * 
	 * @see cc.messcat.gjfeng.service.GjfBenefitNotifyService#
	 * updateMemberBenefitNotify(java.lang.String, java.lang.String,
	 * java.lang.Double, java.lang.Double)
	 */
	@Override
	public BigDecimal[] updateMemberBenefitNumCanSetInBack(String membersMobile, String memberType,
			Double consumptionMoney, Double totalBenefit, String tradeNo, BigDecimal subSysPla) {
		BigDecimal diviNum = new BigDecimal(0.000000);

		if (memberType.equals("0")) {
			double cumulativeMoney = 0.00;
			// 1.求目前剩余的用户(商家)计算分红权的额度，并加上当次消费额度
			Map<String, Object> attrs = new HashMap<String, Object>();
			attrs.put("mobile", membersMobile);
			GjfMemberInfo gjfMemberInfo = gjfBenefitInfoDao.query(GjfMemberInfo.class, attrs);

			// 2.求用户累计消费额度
			Double bfCumulativeMoney = gjfMemberInfo.getCumulativeMoney().doubleValue();
			BigDecimal benefitMoney = new BigDecimal(totalBenefit).setScale(2, BigDecimal.ROUND_UP);

			gjfMemberInfo.setCumulativeMoney(gjfMemberInfo.getCumulativeMoney().add(new BigDecimal(consumptionMoney)));
			gjfMemberInfo
					.setConsumptionMoney(gjfMemberInfo.getConsumptionMoney().add(new BigDecimal(consumptionMoney)));
			cumulativeMoney = gjfMemberInfo.getCumulativeMoney().doubleValue();

			// 根据用户累计消费金额获取分分红权设置信息
			List<GjfSetDividends> diviList = gjfBenefitInfoDao.findDividendsDate(bfCumulativeMoney);
			// 判断是否存在数据
			if (diviList.size() > 0) {
				GjfSetDividends dividends = diviList.get(0);
				// 当用户消费总额小于等于设置的最大消费总额时
				if (cumulativeMoney <= dividends.getConsumptionMax().doubleValue()) {
					BigDecimal a = new BigDecimal(consumptionMoney).divide(dividends.getConsumption(), 6,
							BigDecimal.ROUND_DOWN);
					diviNum = a;
					// 添加记录
					GjfMemberTradeDivi diviHistory = new GjfMemberTradeDivi(null, gjfMemberInfo, tradeNo + "-1",
							diviNum, benefitMoney, new BigDecimal(0.00), new BigDecimal(consumptionMoney), new Date(),
							null, null, "0", "1", "0", "");
					diviHistory.setToken(Sha256.getSha256Hash(diviHistory.getDiviNo(), diviHistory.getDiviStatus(),
							CommonStatus.SIGN_KEY_NUM));
					gjfBenefitInfoDao.save(diviHistory);

				} else {// 当用户消费总额大于设置的最大消费总额时
						// 查看设置的区间的最大消费金额小于消费金额的数据个数
					List<GjfSetDividends> divDateSize = gjfBenefitInfoDao
							.findDividendiByCumulativeMoney(cumulativeMoney, "1");
					if (divDateSize.size() > 0) {
						for (int i = 0; i < divDateSize.size(); i++) {
							if (i == 0) {
								if (bfCumulativeMoney < divDateSize.get(i).getConsumptionMax().doubleValue()) {
									BigDecimal b = new BigDecimal(
											divDateSize.get(i).getConsumptionMax().doubleValue() - bfCumulativeMoney)
													.divide(divDateSize.get(i).getConsumption(), 6,
															BigDecimal.ROUND_DOWN);
									diviNum = diviNum.add(b);
								}
							} else if (i != 0 && i != divDateSize.size() - 1) {
								BigDecimal b = new BigDecimal(divDateSize.get(i).getConsumptionMax().doubleValue()
										- divDateSize.get(i - 1).getConsumptionMax().doubleValue())
												.divide(divDateSize.get(i).getConsumption(), 6, BigDecimal.ROUND_DOWN);
								diviNum = diviNum.add(b);

							} else {
								BigDecimal b = new BigDecimal(
										cumulativeMoney - divDateSize.get(i).getConsumptionMin().doubleValue())
												.divide(divDateSize.get(i).getConsumption(), 6, BigDecimal.ROUND_DOWN);
								diviNum = diviNum.add(b);
							}
						}

						// 添加记录
						GjfMemberTradeDivi diviHistory = new GjfMemberTradeDivi(null, gjfMemberInfo, tradeNo + "-1",
								diviNum, benefitMoney, new BigDecimal(0.00), new BigDecimal(consumptionMoney),
								new Date(), null, null, "0", "1", "0", "");
						diviHistory.setToken(Sha256.getSha256Hash(diviHistory.getDiviNo(), diviHistory.getDiviStatus(),
								CommonStatus.SIGN_KEY_NUM));
						gjfBenefitInfoDao.save(diviHistory);
					}
				}
			}

			gjfMemberInfo
					.setDividendsNum(gjfMemberInfo.getDividendsNum().add(diviNum).setScale(6, BigDecimal.ROUND_DOWN));

			// 4.增加分红权获取记录
			gjfBenefitInfoDao.update(gjfMemberInfo);

		} else {
			Map<String, Object> storeAttrs = new HashMap<String, Object>();
			storeAttrs.put("memberId.mobile", membersMobile);
			GjfStoreInfo gjfStoreInfo = gjfBenefitInfoDao.query(GjfStoreInfo.class, storeAttrs);

			double bfTotalBenefitMoney = gjfStoreInfo.getStoreBenefitTotalMoney().doubleValue();
			BigDecimal benefitMoney = new BigDecimal(totalBenefit).setScale(2, BigDecimal.ROUND_UP);

			gjfStoreInfo.setStoreSaleTotalMoney(
					gjfStoreInfo.getStoreSaleTotalMoney().add(new BigDecimal(consumptionMoney)));
			gjfStoreInfo.setStoreBenefitTotalMoney(gjfStoreInfo.getStoreBenefitTotalMoney().add(benefitMoney));
			gjfStoreInfo
					.setStoreDividendsTotalMoneyBla(gjfStoreInfo.getStoreDividendsTotalMoneyBla().add(benefitMoney));
			double totalBenefitMoney = gjfStoreInfo.getStoreBenefitTotalMoney().doubleValue();

			// 根据用户累计消费金额获取分分红权设置信息
			List<GjfSetDividends> diviList = gjfBenefitInfoDao.findDividendsDate(bfTotalBenefitMoney);
			// 判断是否存在数据
			if (diviList.size() > 0) {
				GjfSetDividends dividends = diviList.get(0);
				// 当用户消费总额小于等于设置的最大消费总额时
				if (totalBenefitMoney <= dividends.getConsumptionMax().doubleValue()) {
					BigDecimal a = new BigDecimal(benefitMoney.doubleValue()).divide(dividends.getConsumption(), 6,
							BigDecimal.ROUND_DOWN);
					diviNum = a;
					// 添加记录
					GjfMemberTradeDivi diviHistory = new GjfMemberTradeDivi(null, gjfStoreInfo.getMemberId(),
							tradeNo + "-2", diviNum, benefitMoney, new BigDecimal(0.00),
							new BigDecimal(consumptionMoney), new Date(), null, null, "0", "3", "1", "");
					diviHistory.setToken(Sha256.getSha256Hash(diviHistory.getDiviNo(), diviHistory.getDiviStatus(),
							CommonStatus.SIGN_KEY_NUM));
					gjfBenefitInfoDao.save(diviHistory);

				} else {// 当用户消费总额大于设置的最大消费总额时
						// 查看设置的区间的最大消费金额小于消费金额的数据个数
					List<GjfSetDividends> divDateSize = gjfBenefitInfoDao
							.findDividendiByCumulativeMoney(totalBenefitMoney, "1");
					if (divDateSize.size() > 0) {
						for (int i = 0; i < divDateSize.size(); i++) {
							if (i == 0) {
								if (bfTotalBenefitMoney < divDateSize.get(i).getConsumptionMax().doubleValue()) {
									BigDecimal b = new BigDecimal(
											divDateSize.get(i).getConsumptionMax().doubleValue() - bfTotalBenefitMoney)
													.divide(divDateSize.get(i).getConsumption(), 6,
															BigDecimal.ROUND_DOWN);
									diviNum = diviNum.add(b);
								}
								
							} else if (i != 0 && i != divDateSize.size() - 1) {
								BigDecimal b = new BigDecimal(divDateSize.get(i).getConsumptionMax().doubleValue()
										- divDateSize.get(i - 1).getConsumptionMax().doubleValue())
												.divide(divDateSize.get(i).getConsumption(), 6, BigDecimal.ROUND_DOWN);
								diviNum = diviNum.add(b);

							} else {
								BigDecimal b = new BigDecimal(
										totalBenefitMoney - divDateSize.get(i).getConsumptionMin().doubleValue())
												.divide(divDateSize.get(i).getConsumption(), 6, BigDecimal.ROUND_DOWN);
								diviNum = diviNum.add(b);
							}
						}

						// 添加记录
						GjfMemberTradeDivi diviHistory = new GjfMemberTradeDivi(null, gjfStoreInfo.getMemberId(),
								tradeNo + "-2", diviNum, benefitMoney, new BigDecimal(0.00),
								new BigDecimal(consumptionMoney), new Date(), null, null, "0", "3", "1", "");
						diviHistory.setToken(Sha256.getSha256Hash(diviHistory.getDiviNo(), diviHistory.getDiviStatus(),
								CommonStatus.SIGN_KEY_NUM));
						gjfBenefitInfoDao.save(diviHistory);
					}
				}
			}
			gjfStoreInfo.setStoreDividendsNum(
					gjfStoreInfo.getStoreDividendsNum().add(diviNum).setScale(6, BigDecimal.ROUND_DOWN));

			gjfBenefitInfoDao.update(gjfStoreInfo);
		}

		// 修改商家让利表记录的分红权额
		Map<String, Object> attrsBenefit = new HashMap<String, Object>();
		Map<String, Object> propsBenefit = new HashMap<String, Object>();
		attrsBenefit.put("tradeNo", tradeNo);
		if (memberType.equals("0")) {
			propsBenefit.put("memberDividendsNum", diviNum);
		} else {
			propsBenefit.put("merchantsDividendsNum", diviNum);
		}
		gjfBenefitInfoDao.update(GjfMemberTradeBenefit.class, propsBenefit, attrsBenefit);

		// 修改资金池
		BigDecimal[] directBenefit = updateBenefitPool(memberType, totalBenefit, subSysPla);
		return directBenefit;
	}

	public BigDecimal updateMemberBenefit(Double couMoney) {

		return null;
	}
     
	/**
	 * 获取全部分红权设置信息
	 */
	@SuppressWarnings("unchecked")
	@Override
	public ResultVo findAllDividends(Integer pageNo, Integer pageSize) {
		Map<String, Object> attr=new HashMap<>();
		attr.put("status", "1");
		return new ResultVo(200,"查询成功",gjfBenefitInfoDao.queryList(GjfSetDividends.class, (pageNo - 1) * pageSize,
				pageSize, "id", "asc", attr));
	}

	/**
	 * 根据id获取分红权设置信息
	 */
	@Override
	public ResultVo findDividendsById(Long divId) {
		Map<String, Object> attr=new HashMap<>();
		attr.put("status", "1");
		attr.put("id", divId);
		return new ResultVo(200,"查询成功",gjfBenefitInfoDao.query(GjfSetDividends.class,attr));
	}

	/**
	 * 添加分红权设置信息
	 * @param setDiv
	 * @return
	 */
	@Override
	public ResultVo addDividensData(GjfSetDividends setDiv) {
		
		 gjfBenefitInfoDao.save(setDiv);
		return new ResultVo(200,"添加成功",null);
	}

	/**
	 * 删除分红权设置信息
	 * @param divId
	 * @return
	 */
	@Override
	public ResultVo removeDividensData(Long divId) {
		Map<String, Object> attr=new HashMap<>();
		attr.put("status", "1");
		attr.put("id", divId);
		GjfSetDividends gjfSetDividends=gjfBenefitInfoDao.query(GjfSetDividends.class,attr);
		gjfBenefitInfoDao.delete(gjfSetDividends);
		return new ResultVo(200,"添加成功",null);
	}

	/**
	 * 修改分红权设置信息
	 * @param setDiv
	 * @return
	 */
	@Override
	public ResultVo modifyDividensData(GjfSetDividends setDiv) {
		gjfBenefitInfoDao.update(setDiv);
		return new ResultVo(200,"修改成功",null);
	}

	/**
	 * 查询最近七天之内用户的让利数据
	 * @param mobile
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	@Override
	public ResultVo findBenefitByTime(String mobile) {
		List list=(List) gjfBenefitInfoDao.findBenefitByTime(mobile).getResult();
		MemberTradeBenefitVo benefit=null;
		if(list.size()>0){
			benefit=(MemberTradeBenefitVo) list.get(0);
		}
		return new ResultVo(200,"查询成功",benefit);
	}

	/**
	 * 用户确认让利提示信息
	 * @param tradeNo
	 * @return
	 */
	@Override
	public ResultVo modifyBenefitConfirmStatus(String tradeNo) {
		Map<String, Object> attr=new HashMap<>();
		attr.put("tradeNo", tradeNo);
		GjfMemberTradeBenefit benefit=gjfBenefitInfoDao.query(GjfMemberTradeBenefit.class,attr);
		benefit.setConfirmStatus("1");
		gjfBenefitInfoDao.update(benefit);
		GjfMemberInfo info=benefit.getMemberId();
		info.setIsConfirm("1");
		gjfBenefitInfoDao.update(info);
		return new ResultVo(200,"修改成功",null);
	}

}
