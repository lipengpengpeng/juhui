package cc.messcat.gjfeng.service.member;

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import cc.messcat.gjfeng.common.constant.CommonStatus;
import cc.messcat.gjfeng.common.exception.MyException;
import cc.messcat.gjfeng.common.util.BeanUtil;
import cc.messcat.gjfeng.common.util.BeanUtilsEx;
import cc.messcat.gjfeng.common.util.EncryptionUtil;
import cc.messcat.gjfeng.common.util.ObjValid;
import cc.messcat.gjfeng.common.util.Sha256;
import cc.messcat.gjfeng.common.util.StringUtil;
import cc.messcat.gjfeng.common.vo.app.MemberInfoVo;
import cc.messcat.gjfeng.common.vo.app.ResultVo;
import cc.messcat.gjfeng.dao.member.GjfMemberInfoDao;
import cc.messcat.gjfeng.entity.GjfMemberInfo;
import cc.messcat.gjfeng.entity.GjfStoreInfo;

@Service("gjfLoginService")
public class GjfLoginServiceImpl implements GjfLoginService {

	@Autowired
	@Qualifier("gjfMemberInfoDao")
	private GjfMemberInfoDao gjfMemberInfoDao;

	@Value("${dubbo.application.web.client}")
	private String projectName;

	@Value("${upload.member.head.path}")
	private String imageFolderName;

	/*
	 * 注册 --微信快捷登陆需要绑定手机号
	 * 
	 * @see cc.messcat.gjfeng.service.member.GjfLoginService#register(java.lang.
	 * String, java.lang.String, java.lang.String, java.lang.String)
	 */
	@Override
	public ResultVo register(String account, String password, String nickName, String sex, String imgHeadUrl, String registerType,
		Long superId, String url) {
		if (StringUtil.isBlank(registerType) || (!"0".equals(registerType) && !"1".equals(registerType))) {
			throw new MyException(400, "注册失败", null);
		}
		if (StringUtil.isBlank(account)) {
			throw new MyException(400, "账号不能为空", null);
		}
		Map<String, Object> attrs = new HashMap<String, Object>();
		if ("0".equals(registerType)) {
			attrs.put("mobile", account);
		} else if ("1".equals(registerType)) {
			attrs.put("unionId", account);
		}
		GjfMemberInfo info = gjfMemberInfoDao.query(GjfMemberInfo.class, attrs);
		if (ObjValid.isValid(info)) {
			throw new MyException(400, "账号已经存在", null);
		}
		info = new GjfMemberInfo();
		if ("0".equals(registerType)) {
			info.setMobile(account);
			info.setPassword(EncryptionUtil.getMD5Code(account + password));
		} else if ("1".equals(registerType)) {
			info.setUnionId(account);
			info.setImgHeadUrl(imgHeadUrl);
		}
		if (ObjValid.isValid(superId)) {
			Object o = gjfMemberInfoDao.get(superId, GjfMemberInfo.class.getName());
			if (ObjValid.isNotValid(o)) {
				throw new MyException(400, "推荐人不存在", null);
			}else{
				info.setSuperId(superId);	
			}
		} else {
			info.setSuperId(0L);
		}
		info.setNickName(nickName);
		info.setSex(StringUtil.isBlank(sex) ? "0" : sex);
		info.setAddTime(new Date());
		info.setBindTime(new Date());
		info.setBalanceMoney(new BigDecimal(0.00));
		info.setConsumptionMoney(new BigDecimal(0.00));
		info.setCumulativeMoney(new BigDecimal(0.00));
		info.setWithdrawalMoney(new BigDecimal(0.00));
		info.setDividendsMoneyBla(new BigDecimal(0.00));
		info.setDividendsTotalMoney(new BigDecimal(0.00));
		info.setDividendsNum(new BigDecimal(0.000000));
		info.setDirectMemberTotalMoney(new BigDecimal(0.00));
		info.setDirectMerchantsTotalMoney(new BigDecimal(0.00));
		info.setAgentMoney(new BigDecimal(0.00));
		info.setAgentTotalMoney(new BigDecimal(0.00));
		info.setLineOfCrade(new BigDecimal(0.00));
		info.setInsuranceMoney(new BigDecimal(0.00));
		info.setDirectMemberTotalMoney(new BigDecimal(0.00));
		info.setIsReadName("0");
		info.setType("0");
		info.setIdentity("0");
		info.setIsReport("1");
		info.setIsBuy("1");
		info.setIsComments("1");
		info.setIsMessage("1");
		info.setIsDivi("1");
		info.setStatus("1");
		info.setIsDel("1");
		info.setRealNameState("0");
		info.setIsConfirm("0");
		info.setToken(Sha256.getSha256Hash(registerType.equals("0") ? info.getMobile() : info.getUnionId(), info.getStatus(),
			CommonStatus.SIGN_KEY_NUM));
		info.setOpenId(url);;
		gjfMemberInfoDao.save(info);
		return new ResultVo(200, "注册成功", BeanUtilsEx.copyBean(MemberInfoVo.class, info));
	}

	/*
	 * 登陆
	 * 
	 * @see
	 * cc.messcat.gjfeng.service.member.GjfLoginService#login(java.lang.String,
	 * java.lang.String, java.lang.String)
	 */
	@Override
	public ResultVo login(String account, String password, String loginType,String type) {
		if (StringUtil.isBlank(loginType) || (!"0".equals(loginType) && !"1".equals(loginType))) {
			throw new MyException(400, "登陆失败", null);
		}
		if (StringUtil.isBlank(account)) {
			throw new MyException(400, "账号不能为空", null);
		}
		Map<String, Object> attrs = new HashMap<String, Object>();
		if ("0".equals(loginType)) {
			if (StringUtil.isBlank(password)) {
				throw new MyException(400, "密码不能为空", null);
			}
			attrs.put("mobile", account);
			if(type==null){
				attrs.put("password", EncryptionUtil.getMD5Code(account + password));
			}else{
				attrs.put("password", password);
			}
			
		} else {
			attrs.put("unionId", account);
		}
		GjfMemberInfo info = gjfMemberInfoDao.query(GjfMemberInfo.class, attrs);
		if (ObjValid.isNotValid(info)) {
			throw new MyException(400, "账号或密码错误", null);
		}
		return new ResultVo(200, "登陆成功", BeanUtilsEx.copyBean(MemberInfoVo.class, info));
	}

	/*
	 * 忘记密码
	 * 
	 * @see
	 * cc.messcat.gjfeng.service.member.GjfLoginService#updateForgetPwd(java.
	 * lang.String, java.lang.String, java.lang.String)
	 */
	@Override
	public ResultVo updateForgetPwd(String account, String password, String rePassword) {
		if (StringUtil.isBlank(account)) {
			return new ResultVo(400, "账号不能为空", null);
		}
		if (StringUtil.isBlank(password)) {
			return new ResultVo(400, "密码不能为空", null);
		}
		if (StringUtil.isBlank(rePassword)) {
			return new ResultVo(400, "重复密码不能为空", null);
		}
		if (!password.equals(rePassword)) {
			return new ResultVo(400, "密码不一致", null);
		}
		Map<String, Object> attrs = new HashMap<String, Object>();
		attrs.put("mobile", account);
		GjfMemberInfo gjfMemberInfo = gjfMemberInfoDao.query(GjfMemberInfo.class, attrs);
		if (ObjValid.isNotValid(gjfMemberInfo)) {
			return new ResultVo(400, "用户不存在", null);
		}
		gjfMemberInfo.setPassword(EncryptionUtil.getMD5Code(account + password));
		gjfMemberInfoDao.update(gjfMemberInfo);
		return new ResultVo(200, "修改成功", BeanUtilsEx.copyBean(MemberInfoVo.class, gjfMemberInfo));
	}

	/*
	 * 修改密码
	 * 
	 * @see
	 * cc.messcat.gjfeng.service.member.GjfLoginService#updatePwd(java.lang.
	 * String, java.lang.String, java.lang.String, java.lang.String)
	 */
	@Override
	public ResultVo updatePwd(String account, String oldPassword, String newPassword, String rePassword) {
		if (StringUtil.isBlank(account)) {
			return new ResultVo(400, "账号不能为空", null);
		}
		if (StringUtil.isBlank(oldPassword)) {
			return new ResultVo(400, "原密码不能为空", null);
		}
		if (StringUtil.isBlank(newPassword)) {
			return new ResultVo(400, "新密码不能为空", null);
		}
		if (StringUtil.isBlank(rePassword)) {
			return new ResultVo(400, "重复密码不能为空", null);
		}
		if (!newPassword.equals(rePassword)) {
			return new ResultVo(400, "密码不一致", null);
		}
		Map<String, Object> attrs = new HashMap<String, Object>();
		attrs.put("mobile", account);
		attrs.put("password", EncryptionUtil.getMD5Code(account + oldPassword));
		GjfMemberInfo gjfMemberInfo = gjfMemberInfoDao.query(GjfMemberInfo.class, attrs);
		if (ObjValid.isNotValid(gjfMemberInfo)) {
			return new ResultVo(400, "密码错误", null);
		}
		gjfMemberInfo.setPassword(EncryptionUtil.getMD5Code(account + newPassword));
		gjfMemberInfoDao.update(gjfMemberInfo);
		return new ResultVo(200, "修改成功", BeanUtilsEx.copyBean(MemberInfoVo.class, gjfMemberInfo));
	}

	/*
	 * 微信快捷登陆绑定手机号码
	 * 
	 * @see
	 * cc.messcat.gjfeng.service.member.GjfLoginService#updateBindMobie(java.
	 * lang.String, java.lang.String)
	 */
	@Override
	public ResultVo updateBindMobie(String unionId, String mobile) {

		//如果微信unionId为空，返回提示
		if (StringUtil.isBlank(unionId)) {			
			return new ResultVo(400, "微信账号不能为空", null);
		}
		//如果电话号码为空，返回提示信息
		if (StringUtil.isBlank(mobile)) {
			return new ResultVo(400, "手机号不能为空", null);
		}
		//根据手机号码获取用户信息
		Map<String, Object> attrs = new HashMap<String, Object>();
		attrs.put("mobile", mobile);
		GjfMemberInfo memberInfo = gjfMemberInfoDao.query(GjfMemberInfo.class, attrs);
		if (ObjValid.isValid(memberInfo)) {
			return new ResultVo(400, "手机号已经存在，请更换其他手机号", null);
		}
		//根据unionId获取用户信息
		attrs.remove("mobile");
		attrs.put("unionId", unionId);
		GjfMemberInfo gjfMemberInfo = gjfMemberInfoDao.query(GjfMemberInfo.class, attrs);
		if (ObjValid.isNotValid(gjfMemberInfo)) {
			return new ResultVo(400, "用户不存在", null);
		}
		//如果已经存在用户,整合数据
		/*if (ObjValid.isValid(memberInfo)) {
			//名称
			gjfMemberInfo.setName(memberInfo.getName());
			//登录密码
			gjfMemberInfo.setPassword(memberInfo.getPassword());
			//支付密码
			gjfMemberInfo.setPayPassword(memberInfo.getPayPassword());
			//身份证号码
			gjfMemberInfo.setIdCard(memberInfo.getIdCard());
			//处理推荐人
			if(gjfMemberInfo.getSuperId()!=memberInfo.getSuperId()&&gjfMemberInfo.getSuperId()==0){
				gjfMemberInfo.setSuperId(memberInfo.getSuperId());
			}
			//简介
			gjfMemberInfo.setRemark(memberInfo.getRemark());
			//用户越
			gjfMemberInfo.setBalanceMoney(memberInfo.getBalanceMoney());
			//用户待领消费金额
			gjfMemberInfo.setConsumptionMoney(memberInfo.getConsumptionMoney());
			//用户累计消费金额
			gjfMemberInfo.setCumulativeMoney(memberInfo.getCumulativeMoney());
			//用户下级累计消费金额
			gjfMemberInfo.setLowLevelCumulativeMoney(memberInfo.getLowLevelCumulativeMoney());
			//用户可提现额
			gjfMemberInfo.setWithdrawalMoney(memberInfo.getWithdrawalMoney());
			//用户分红剩余计算金额
			gjfMemberInfo.setDividendsMoneyBla(memberInfo.getDividendsMoneyBla());
			//用户累计分红金额  
			gjfMemberInfo.setDividendsTotalMoney(memberInfo.getDividendsTotalMoney());
			//用户分红权个数 
			gjfMemberInfo.setDividendsNum(memberInfo.getDividendsNum());
			//用户直推会员分红总金额
			gjfMemberInfo.setDirectMemberTotalMoney(memberInfo.getDirectMemberTotalMoney());
			//用户直推商家分红总金额 
			gjfMemberInfo.setDirectMerchantsTotalMoney(memberInfo.getDirectMerchantsTotalMoney());
			//用户当前未结算代理金额 
			gjfMemberInfo.setAgentMoney(memberInfo.getAgentMoney());
			//用户总获取代理金额
			gjfMemberInfo.setAgentTotalMoney(memberInfo.getAgentTotalMoney());
			//用户责任消费险金额 
			gjfMemberInfo.setInsuranceMoney(memberInfo.getInsuranceMoney());
			// 用户代理开始时间
			gjfMemberInfo.setAgentStartDate(memberInfo.getAgentStartDate());
			//用户代理结束时间
			gjfMemberInfo.setAgentEndDate(memberInfo.getAgentEndDate());
			//用户是否实名认证
			gjfMemberInfo.setIsReadName(memberInfo.getIsReadName());
			//如果原来存在的用是商家
			if("1".equals(memberInfo.getType())){
				//根据用户id查询店铺信息
				Map<String, Object> attr=new HashMap<>();
				attr.put("memberId.id",memberInfo.getId());
				GjfStoreInfo store=gjfMemberInfoDao.query(GjfStoreInfo.class, attr);
				//如果店铺不存在返回提示信息
				if (ObjValid.isNotValid(store)) {
					return new ResultVo(400, "旧用户店铺不存在", null);
				}
				//更新店铺用户id
				store.setMemberId(gjfMemberInfo);
				//更新店铺
				gjfMemberInfoDao.update(store);
				//用户类型（0:普通用户 1:商家）
				gjfMemberInfo.setType(memberInfo.getType());
			}
			//用户身份（0:普通用户 1:个代 2:区代 3:市代） 
			gjfMemberInfo.setIdentity(memberInfo.getIdentity());
			//用户是否可以分红（0:否 1:是）
			gjfMemberInfo.setIsDivi(memberInfo.getIsDivi());
			//用户状态(0:已停用 1:已启用) 
			gjfMemberInfo.setStatus(memberInfo.getStatus());
			// 用户删除状态(0:已删除 1:正常)
			gjfMemberInfo.setIsDel(memberInfo.getIsDel());
			//用户实名认证状态 0:未提交审核 1:审核中 2:审核成功 3:审核失败
			gjfMemberInfo.setRealNameState(memberInfo.getRealNameState());
			//授信额度  
			gjfMemberInfo.setLineOfCrade(memberInfo.getLineOfCrade());
			//APP用户二维码  
			gjfMemberInfo.setImgAppQrUrl(memberInfo.getImgAppQrUrl());
			
			//处理旧用户信息,把app用户的删除状态设置为0（0表示已经删除）
			memberInfo.setIsDel("0");
			//更新用户数据
			gjfMemberInfoDao.update(memberInfo);
			
	    }*/
		gjfMemberInfo.setMobile(mobile);
		gjfMemberInfoDao.update(gjfMemberInfo);
		return new ResultVo(200, "绑定成功", BeanUtilsEx.copyBean(MemberInfoVo.class, gjfMemberInfo));
	}

	/*
	 * 设置修改支付密码
	 * 
	 * @see
	 * cc.messcat.gjfeng.service.member.GjfLoginService#updatePayPwd(java.lang.
	 * String, java.lang.String, java.lang.String)
	 */
	@Override
	public ResultVo updatePayPwd(String account, String payPwd, String rePayPwd) {
		if (StringUtil.isBlank(account)) {
			return new ResultVo(400, "账号不能为空", null);
		}
		if (StringUtil.isBlank(payPwd)) {
			return new ResultVo(400, "新支付密码不能为空", null);
		}
		if (StringUtil.isBlank(rePayPwd)) {
			return new ResultVo(400, "重复支付密码不能为空", null);
		}
		if (!payPwd.equals(rePayPwd)) {
			return new ResultVo(400, "支付密码不一致", null);
		}
		Map<String, Object> attrs = new HashMap<String, Object>();
		attrs.put("mobile", account);
		GjfMemberInfo gjfMemberInfo = gjfMemberInfoDao.query(GjfMemberInfo.class, attrs);
		if (ObjValid.isNotValid(gjfMemberInfo)) {
			return new ResultVo(400, "用户不存在", null);
		}
		gjfMemberInfo.setPayPassword(EncryptionUtil.getMD5Code(account + payPwd));
		gjfMemberInfoDao.update(gjfMemberInfo);
		return new ResultVo(200, "设置成功", BeanUtilsEx.copyBean(MemberInfoVo.class, gjfMemberInfo));

	}

	@Override
	public ResultVo upateBindMobieInApp(String uid,String Mobile,String password) {
		if (StringUtil.isBlank(Mobile)) {
			return new ResultVo(400, "账号不能为空", null);
		}
		if (StringUtil.isBlank(password)) {
			return new ResultVo(400, "密码不能为空", null);
		}
		Map<String, Object> attr=new HashMap<>();
		attr.put("unionId", uid);
		GjfMemberInfo gjfMemberInfo = gjfMemberInfoDao.query(GjfMemberInfo.class, attr);		
		if (!BeanUtil.isValid(gjfMemberInfo)) {
			return new ResultVo(400, "用户不存在", null);
		}
		if(gjfMemberInfo.getMobile()!=Mobile){
			attr.remove("unionId");
			attr.put("mobile", Mobile);
			GjfMemberInfo mem = gjfMemberInfoDao.query(GjfMemberInfo.class, attr);
			if(BeanUtil.isValid(mem)){
				return new ResultVo(400, "用户已存在", null);
			}
		}
		
		gjfMemberInfo.setMobile(Mobile);
		gjfMemberInfo.setPassword(EncryptionUtil.getMD5Code(Mobile + password));
		gjfMemberInfoDao.update(gjfMemberInfo);
		return new ResultVo(200,"绑定成功",gjfMemberInfo);
	}

}
