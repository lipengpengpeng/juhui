package cc.messcat.gjfeng.dao.order;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import cc.messcat.gjfeng.common.bean.Pager;
import cc.messcat.gjfeng.common.vo.app.OrderInfosVo;
import cc.messcat.gjfeng.dao.BaseHibernateDao;
import cc.messcat.gjfeng.entity.GjfOrderInfo;

public interface GjfOrderInfoDao extends BaseHibernateDao<Serializable> {
	
	/**
	 * @描述 修改超时未支付订单为过期状态
	 * @author Karhs
	 * @date 2017年1月5日
	 * @return
	 */
	public void updateOrderToOverdue(String orderSn);
	
	/**
	 * @描述 根据账户和订单状态查询订单
	 * @author Karhs
	 * @date 2017年1月5日
	 * @param account
	 * @param status 为null时查询当个用户全部订单
	 * @return
	 */
	public List<OrderInfosVo> findMyOrder(int pageNo,int pageSize,String account,String status);
	
	/**
	 * 分页查询全部订单信息
	 * @param pageNo
	 * @param pageSize
	 * @param likeValue
	 * @param orderStatus
	 * @param payStatus
	 * @param startDate
	 * @param endDate
	 * @return
	 */
	public Pager findAllOrder(int pageNo,int pageSize,String orderSn,String storeName,String goodsName,
			String name,String nickName,String orderStatus,String payType,String orderType ,String startDate,String endDate,String ste,String jdOrderSn,String goodSource);
	
	/**
	 * 根据状态获取订单信息
	 * @param pageNo
	 * @param pageSize
	 * @param account
	 * @param status
	 * @return
	 */
	public List findOrderByStatus(int pageNo,int pageSize,String account,String status);

	/**
	 * 根据用户Id等条件查询用户订单
	 * @param pageNo
	 * @param pageSize
	 * @param memberId
	 * @param startTime
	 * @param endTime
	 * @return
	 */
	public Pager findOrderByMemberId(int pageNo, int pageSize, Long memberId, String startTime, String endTime);
	

	/**
	 * 查找分销商品
	 * @param pageNo
	 * @param pageSize
	 * @param id
	 * @return
	 */
	public List findLowersOrderGoodsById(Long id);
	
	/**
	 * 获取订单详细信息
	 * @param orderId
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	public Map findOrderInfoById(Long orderId);
	
	/**
	 * 查询商家订单
	 * @return
	 */
	public Pager findOrderByCondition(int pageNo, int pageSize,Long id,String token,String startTime,String endTime);
	
	/**
	 * 查询商家O2O订单:当前条件统计
	 * @return
	 */
	public List findCountOrderByCondition(Long id, String token, String startTime, String endTime);
	
	/**
	 * 统计用户购买积分商品的次数
	 * @param memId
	 * @param proId
	 * @return
	 */
	public int countMemberOrder(Long memId,Long proId);
	
	/**
	 * 结算订单积分
	 * @return
	 */
	public List<GjfOrderInfo> findSettlementOrder();

	
	
}
